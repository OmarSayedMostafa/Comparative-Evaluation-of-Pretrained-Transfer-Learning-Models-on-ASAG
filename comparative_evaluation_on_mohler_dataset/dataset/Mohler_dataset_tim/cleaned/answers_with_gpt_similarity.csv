,id,answer,score_me,score_other,score_avg,gpt_similarity_score
0,1.1,High risk problems are address in the prototype program to make sure that the program is feasible.  A prototype may also be used to show a company that the software can be possibly programmed.  ,4.0,3.0,3.5,0.9949564264854037
1,1.1,To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.,5.0,5.0,5.0,0.9935473020730173
2,1.1,A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.,5.0,3.0,4.0,0.9990154814780859
3,1.1,"Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",5.0,5.0,5.0,0.9920655366825067
4,1.1,It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.,3.0,3.0,3.0,0.9951580916707367
5,1.1,To find problem and errors in a program before it is finalized,2.0,2.0,2.0,0.9944987822211808
6,1.1,"To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. ",3.0,2.0,2.5,0.9956336000158511
7,1.1,you can break the whole program into prototype programs to simulate parts of the final program,5.0,5.0,5.0,0.9905921905508349
8,1.1,-To provide an example or model of how the finished program should perfom.  -Provides forsight of some of the challanges that would be encountered.  -Provides opportunity To introduce changes To the finished program.,5.0,2.0,3.5,0.9963232462839204
9,1.1,Simulating the behavior of only a portion of the desired software product.,5.0,5.0,5.0,0.998604615321477
10,1.1,A program that stimulates the behavior of portions of the desired software product.,5.0,5.0,5.0,0.9985026014287671
11,1.1,A program that simulates the behavior of portions of the desired software product.,5.0,5.0,5.0,0.9985026014287671
12,1.1,To lay out the basics and give you a starting point in the actual problem solving.,2.0,2.0,2.0,0.9935240547442069
13,1.1,To simulate problem solving for parts of the problem,4.0,5.0,4.5,0.9959318676764894
14,1.1,A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.,2.0,2.0,2.0,0.9951970100580191
15,1.1,"A prototype program is a part of the Specification phase of Software Problem Solvin.  It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.",4.0,5.0,4.5,0.9946912018074459
16,1.1,Program that simulates the behavior of portions of the desired software product,5.0,5.0,5.0,0.997516661889708
17,1.1,it provides a limited proof of concept to verify with the client before actually programming the whole application. ,2.0,2.0,2.0,0.9936076690583996
18,1.1,It tests the main function of the program while leaving out the finer details. ,2.0,2.0,2.0,0.998025717139926
19,1.1,To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.,3.0,2.0,2.5,0.9924299195811868
20,1.1,it simulates the behavior of portions of the desired software product,5.0,5.0,5.0,0.9978230445884487
21,1.1,It simulates the behavior of portions of the desired software product.,5.0,5.0,5.0,1.0
22,1.1,A prototype program is used in problem solving to collect data for the problem.,1.0,2.0,1.5,0.9948434169769362
23,1.1,To ease the understanding of problem under discussion and to ease the understanding of the program itself,2.0,3.0,2.5,0.9985175751756782
24,1.1,it simulates the behavior of portions of the desired software product,5.0,5.0,5.0,0.9978230445884487
25,1.1,The role of a prototype program is to help spot key problems that may arise during the actual programing. ,2.0,2.0,2.0,0.9955934376348032
26,1.1,"the prototype program gives a general idea of what the end product will do,   without the time and effort to write out the entire program.",4.0,2.0,3.0,0.9935786197727371
27,1.1,to show that a certain part of the program works as it is supposed to,4.0,2.0,3.0,0.9869522897794913
28,1.1,"Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. ",3.0,2.0,2.5,0.9924954366497295
29,1.2,Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.,5.0,2.0,3.5,0.9862947368549242
30,1.2,The implementation phase and the maintenance phase are effected,3.0,5.0,4.0,0.9912547530239789
31,1.2,"Verification, coding, refining the solution and maintenance are all influenced by the testing stage.",4.0,5.0,4.5,0.9889959296851057
32,1.2,"In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.",2.0,4.0,3.0,0.986182071991884
33,1.2,"Refining the solution, Production and Maintenance are all influenced by the Testing stage. ",3.0,3.0,3.0,0.9912752075207111
34,1.2,"Elaboration, Construction, and Transition are all affected by testing",2.0,2.0,2.0,0.9869721134935664
35,1.2,"Refining, Production, Maintenance",3.0,4.0,3.5,0.9909304204729862
36,1.2,Refining the solution,3.0,5.0,4.0,0.9814299255449699
37,1.2,-Verification  -Debugging,3.0,1.0,2.0,0.983686755343934
38,1.2,Refining and Coding,5.0,5.0,5.0,0.9784786795018409
39,1.2,"The second half of the Elaboration phase, Construction phase, and the Transition phase. ",2.0,3.0,2.5,0.9885646921891909
40,1.2,"The refining step, the production step, and the maintenance stage.  ",3.0,4.0,3.5,0.9900651033536615
41,1.2,"Elaboration, Construction, Transition",2.0,2.0,2.0,0.9909304204729862
42,1.2,Refining.,3.0,3.0,3.0,0.9736070825544273
43,1.2,"The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",2.0,1.0,1.5,0.9941485289065315
44,1.2,"Directly: Refining, coding.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase.  Indirectly: Production, Maintenance.  Because Refining occurs before these last two stages in the Software Life Cycle.",5.0,5.0,5.0,0.9880136150221301
45,1.2,"Testing, refining, production, and maintenance.",3.0,4.0,3.5,0.9896618036769198
46,1.2,"Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. ",2.0,1.0,1.5,0.9829766384319847
47,1.2,"Elaboration, construction, and transition.",2.0,3.0,2.5,0.9892728439656854
48,1.2,"All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",2.0,1.0,1.5,0.9924056006605682
49,1.2,"Refining, production, and maintenance",3.0,3.0,3.0,0.9896904112643864
50,1.2,coding and refining,5.0,5.0,5.0,0.9784786795018409
51,1.2,"refining, production, maintenance.",3.0,4.0,3.5,0.9907601939433902
52,1.2,"Removing logical errors, testing for valid data, random data and actual data.",2.0,0.0,1.0,0.9903985150202853
53,1.2,1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance,1.0,4.0,2.5,0.9877408097397109
54,1.2,"Refining stage, Production stage, and Maintenance stage.  ",3.0,4.0,3.5,0.993416028292531
55,1.2,Testing could affect all parts of the life cycle; it could make you go back   to specification if it does not test well.,2.0,2.0,2.0,0.9854606772655653
56,1.2,coding,3.0,3.0,3.0,0.9575446886093895
57,1.2,"The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output ",1.0,2.0,1.5,0.9889187152775151
58,1.3,"Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.",4.0,5.0,4.5,0.9749748033557926
59,1.3,"This type of programming is more flexible, making it easier to add and modify the program.  It is also a type of a fail safe program, you check each individual module.  This eliminates redundant code and makes the program easier to read for other programmers.  When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.",5.0,5.0,5.0,0.9692338378022873
60,1.3,The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier. ,3.0,4.0,3.5,0.9897687632242114
61,1.3,The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.,2.0,3.0,2.5,0.9808233598343621
62,1.3,Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.,3.0,4.0,3.5,0.9896210446622586
63,1.3,Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.,1.0,1.0,1.0,0.9856900143330758
64,1.3,"Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",4.0,4.0,4.0,0.971747816145016
65,1.3,Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time,2.0,3.0,2.5,0.9879168345654843
66,1.3,-Easier to debugg   -Reusability,3.0,3.0,3.0,0.9941109061577323
67,1.3,Re-usability  and ease of maintenance,3.0,5.0,4.0,0.9982743335306258
68,1.3,"One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. ",5.0,5.0,5.0,0.9790062305160516
69,1.3,"Existing classes can be reused, and program maintenance and verification are easier.",3.0,4.0,3.5,0.9815601433378385
70,1.3,Using different modules allows for easier debugging,2.0,2.0,2.0,0.9905951156579528
71,1.3,"Data encapsulation concept,the use of functions or methods to manipulate data.",3.0,4.0,3.5,0.9850877599779907
72,1.3,"Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",5.0,4.0,4.5,0.9731764533857753
73,1.3,"Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify.  The code itself also looks more organized and is easier to read and will help to avoid redundant coding.  Post-programming maintenance is also easier.  Also, modules can be reused several times in other programs without too much hassle.   Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them.  Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.",5.0,5.0,5.0,0.9636927494291976
74,1.3,"Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.",4.0,5.0,4.5,0.9836014566833274
75,1.3,Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data. ,3.0,4.0,3.5,0.9865203495242718
76,1.3,Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.,5.0,3.0,4.0,0.9729374413037354
77,1.3,"They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",5.0,4.0,4.5,0.9863217394833237
78,1.3,"Existing classes can be reused, Program maintenance and verification are easier ",3.0,4.0,3.5,0.9843944662776994
79,1.3,"Existing classes can be feused, Program maintenance and verification are easier",3.0,4.0,3.5,0.9843944662776994
80,1.3,"the main advantages to object-oriented programming  is data abstraction, easier maintenance, and re-usability.",5.0,5.0,5.0,0.9885390579932898
81,1.3,Existing classes can be reused Program maintenance and verifications are easy,3.0,5.0,4.0,0.9920303090203291
82,1.3,1- Existing classes can be reused 2- Program maintenance and verification are easier  ,3.0,4.0,3.5,0.9902115124727572
83,1.3,Information can be hidden. It is easier to debug. Programming is easier and more manageable. ,3.0,4.0,3.5,0.9903565109527969
84,1.3,"Existing classes can be reused, program maintenance and verification are   easier.",3.0,4.0,3.5,0.9832139415976447
85,1.3,existing classes can be reused program maintenance and verification are easier,3.0,4.0,3.5,0.9919080642979432
86,1.3,"Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. ",3.0,4.0,3.5,0.9722276738404787
87,1.4,At function â€˜int main ()â€™,5.0,5.0,5.0,0.9878804028081727
88,1.4,the Function main().,5.0,5.0,5.0,0.9907703129485831
89,1.4,c++ programs begin to execute in the main method.,5.0,5.0,5.0,0.9911559814443994
90,1.4,A C++ program will begin to execute at the main() function. ,5.0,5.0,5.0,0.9884297686616998
91,1.4,They begin in the main() function.,5.0,5.0,5.0,0.9892543053507131
92,1.4,Int main(),5.0,5.0,5.0,0.9857484665253694
93,1.4,main method,5.0,5.0,5.0,0.9850270654471324
94,1.4,in the testing phase,0.0,0.0,0.0,0.9906150346410677
95,1.4,-At the MAIN function,5.0,5.0,5.0,0.9949176586596729
96,1.4,main,5.0,5.0,5.0,0.9697550322919476
97,1.4, They begin to execute at the funcion main().,5.0,5.0,5.0,0.9907759110825276
98,1.4,The main method.,5.0,5.0,5.0,0.9939883008535706
99,1.4,At the root,0.0,5.0,2.5,0.9951829478480659
100,1.4,In the main() function.,5.0,5.0,5.0,0.9946526485247222
101,1.4,C++ programs begin execution at main.,5.0,5.0,5.0,0.9893462623116355
102,1.4,In the Main function..?,5.0,5.0,5.0,0.9940085258617717
103,1.4,"At the ""main()"" function",5.0,5.0,5.0,0.9918107700521012
104,1.4,The main function.,5.0,5.0,5.0,0.9939883008535706
105,1.4,The function main,5.0,5.0,5.0,0.990707101336784
106,1.4,"After loading the required include statements and libraries, the main method begins the execution.",5.0,5.0,5.0,0.9862145743147097
107,1.4,main function,5.0,5.0,5.0,0.9850270654471324
108,1.4,main,5.0,5.0,5.0,0.9697550322919476
109,1.4,C++ programs begin execution at the main function.,5.0,5.0,5.0,0.9916984152149977
110,1.4,At main,5.0,5.0,5.0,0.9833629751131172
111,1.4,they beging to excute at main,5.0,5.0,5.0,0.9878823669529538
112,1.4,at the main function  int main() {},5.0,5.0,5.0,0.9897117599585766
113,1.4,C++ programs begin execution at the main function.,5.0,5.0,5.0,0.9916984152149977
114,1.4,"in the ""main"" function",5.0,5.0,5.0,0.9944404213139807
115,1.4,Within the main function,5.0,5.0,5.0,0.9990706218563099
116,1.5,Variable can be a integer or a string in a program.,1.0,3.0,2.0,0.9930900979296544
117,1.5,"In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. ",4.0,5.0,4.5,0.9911714940713556
118,1.5,A variable is a location in memory where a value can be stored.,5.0,5.0,5.0,0.9974249993482978
119,1.5," Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.",5.0,5.0,5.0,0.9938030037099718
120,1.5,"A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",5.0,5.0,5.0,0.9951843524684844
121,1.5,A named object that can hold a numerical or letter value,2.0,5.0,3.5,0.9980703858232701
122,1.5,"It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.",3.0,5.0,4.0,0.9933190190568525
123,1.5,A variable is a location in the computers memory where a value can be stored for use by a program,5.0,5.0,5.0,0.9974957715722222
124,1.5, -An identifier that holds a location in memory.,3.0,5.0,4.0,0.9985931114239972
125,1.5,a block of memory that holds a specific type of data,5.0,5.0,5.0,0.994991994875633
126,1.5,  It is a location in the computer's memory where it can be stored for use by a program.,5.0,5.0,5.0,0.996344721136203
127,1.5,A location in memory where value can be stored.,5.0,5.0,5.0,0.998289971269606
128,1.5,a value/word that can assume any of a set of values,3.0,3.0,3.0,0.995295164647351
129,1.5,A pointer to a location in memory.,3.0,5.0,4.0,0.9957092002335032
130,1.5,"A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",5.0,5.0,5.0,0.989080405433555
131,1.5,A variable is a value that is subject to change in a computer's memory that can be used by programs.  Programs can change the value of the variable and recall it later or act on it directly.,5.0,5.0,5.0,0.9960501266424232
132,1.5,a symbol that stands in for a value that may or may not change depending on the program. ,3.0,5.0,4.0,0.995937852522974
133,1.5,"a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. ",4.0,5.0,4.5,0.9800694214619768
134,1.5,a stored value used by the program,4.0,5.0,4.5,0.9943116239705482
135,1.5,"A way to store different values into the program, such as numbers, words, letters, etc.",4.0,5.0,4.5,0.9930742735386586
136,1.5,An object with a location in memory where value can be stored ,2.0,5.0,3.5,0.9968732322997294
137,1.5,location in memory where a value can be stored,5.0,5.0,5.0,0.9963028682985179
138,1.5,a variable is an object where data is stored.,2.0,5.0,3.5,0.9947083668339235
139,1.5,Location in memory where a value can be stored.,5.0,5.0,5.0,0.9967005668764751
140,1.5,it is a location in memory where value can be stored ,5.0,5.0,5.0,0.9961340992478275
141,1.5,A variable is the location in a computer's memory where a value can be stored for use by a program.,5.0,5.0,5.0,0.9974892466693116
142,1.5,A variable is a location in a computers memory where a value can be stored   for use by a program.,5.0,5.0,5.0,0.9974628354647337
143,1.5,a location in memory where data can be stored and retrieved,5.0,5.0,5.0,0.9970292275925469
144,1.5,"Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. ",5.0,5.0,5.0,0.9889833131958654
145,1.6,"They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.",1.0,3.0,2.0,0.9928370684863438
146,1.6,In the Function main() before using the variable.,1.0,5.0,3.0,0.9885127733018533
147,1.6,"Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.",5.0,5.0,5.0,0.99281457825803
148,1.6,Variables are declared where ever it is defined either inside a block locally or outside a block globally.,4.0,5.0,4.5,0.9933246516089154
149,1.6,Variables are declared before they are actually used. They can be declared before main() to use globally,3.0,5.0,4.0,0.9936317522366221
150,1.6,"For good programing practice they should be declared before main(), but should at least be declared before they are used.",2.0,3.0,2.5,0.9914298817216584
151,1.6,"They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).",5.0,5.0,5.0,0.9875425745331343
152,1.6,local variables are declared inside the method while global variables are declared in the body.,5.0,5.0,5.0,0.9942997866333328
153,1.6, -Any where in the main function.,1.0,3.0,2.0,0.9823151019944446
154,1.6,"Globally for an entire program, and locally for individual functions (including FOR statements)",4.0,5.0,4.5,0.9883119959975395
155,1.6, They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type. ,2.0,4.0,3.0,0.9931116036086763
156,1.6,Inside the method.,2.0,3.0,2.5,0.9859120221248667
157,1.6,at the top,1.0,2.0,1.5,0.9662930270448931
158,1.6,Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.,5.0,5.0,5.0,0.9930876187041153
159,1.6,Variables are usually declared at the beginning of a module of C++ code.,2.0,3.0,2.5,0.9932358810300153
160,1.6,"In the main function, usually at the top of code.  They can be declared almost anywhere, but must be declared before the code can use or act upon them.",3.0,4.0,3.5,0.9887297076913647
161,1.6,in the very beginning of the program. Before the main() starts. ,1.0,3.0,2.0,0.9919179367774084
162,1.6,"In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.",2.0,3.0,2.5,0.9814055960711575
163,1.6,After declaration of the variable's data type.,1.0,1.0,1.0,0.9907710781448376
164,1.6,"anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",3.0,3.0,3.0,0.9882552852527804
165,1.6,Before they are used.,2.0,2.0,2.0,0.9865246874433289
166,1.6,Anywhere in the same scope before they are used,3.0,4.0,3.5,0.9914492887167841
167,1.6,variables can be declared in classes and methods.,1.0,4.0,2.5,0.9930957286701347
168,1.6,inside the function scope and outside of the function scope in case of global variables,5.0,5.0,5.0,0.9922280344877291
169,1.6,global variables are declared in the main function local variables are declared in any other function,3.0,5.0,4.0,0.9944407427542319
170,1.6,"Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.",4.0,4.0,4.0,0.9940410587040994
171,1.6,"Variables are declared in the main function, before any operation is   attempted with the variables.",1.0,3.0,2.0,0.9929207079285556
172,1.6,"anywhere, but where you declare them depends on where you want them to be accessible (their scope)",4.0,5.0,4.5,0.9917192479654289
173,1.6,It depends if itâ€™s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesnâ€™t need to be declared outside the variable seeing how it is used for the function or block its being called for. ,4.0,5.0,4.5,0.9909589920544917
174,1.7,"""The â€œdoâ€ statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. 	The â€œdo whileâ€ statement executes the lines of code and then it evaluates the condition. """,4.0,5.0,4.5,0.9898070800818144
175,1.7,do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.,5.0,5.0,5.0,0.9925428753632841
176,1.7,"The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.",5.0,5.0,5.0,0.9945580412333436
177,1.7,While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.,5.0,5.0,5.0,0.9919858041892384
178,1.7,"The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",5.0,5.0,5.0,0.9902119083432596
179,1.7,A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.,5.0,5.0,5.0,0.9892570717419782
180,1.7,"A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.",5.0,5.0,5.0,0.9813050344393539
181,1.7,a do while loop always executes once. A while loop's conditional statement has to be true for it to run.,5.0,5.0,5.0,0.9948585965438058
182,1.7,"-WHILE statement --The condition is checked for validity, then is repeated until the conditon is false.    -Do...WHILE statement--The code is performed at least once then checked for valid condition.  Will continue to                             ",5.0,5.0,5.0,0.9800263633686902
183,1.7,"while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.",5.0,5.0,5.0,0.976236341605315
184,1.7,  The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.,5.0,5.0,5.0,0.9949293940809593
185,1.7,The loop of a do...while statement always executes once.,4.0,5.0,4.5,0.9955047859294666
186,1.7,"a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.",5.0,5.0,5.0,0.9876798368743157
187,1.7,"Do ...while runs the embedded code at least once, the do command does not necessarily",4.0,4.0,4.0,0.9934100923585905
188,1.7,"While tests for true first before running, do...while runs once first before checking.",5.0,5.0,5.0,0.9901410035080791
189,1.7,A do...while statement's body always executes at least once.  Where as a while statement will not execute at all unless the condition for the while is true.,5.0,5.0,5.0,0.9956633772421914
190,1.7,The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met. ,5.0,5.0,5.0,0.9928654059589915
191,1.7,"a do... while loop will always run through once, while an while loop performs a test before running through the loop.",5.0,5.0,5.0,0.9921611341996805
192,1.7,A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.,5.0,5.0,5.0,0.9938024436899471
193,1.7,"A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.",3.0,4.0,3.5,0.9906881345399887
194,1.7,the loop body always executes at least once ,3.0,4.0,3.5,0.9936059797365833
195,1.7,"While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.",5.0,5.0,5.0,0.9873553042721469
196,1.7,"A do...while statement will always execute the ""do"" piece of code at least once before checking the condition. A while statement will always check the condition first.",5.0,5.0,5.0,0.9935930895285146
197,1.7,"A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",5.0,5.0,5.0,0.9846174330577535
198,1.7,"a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.",5.0,5.0,5.0,0.9845086846896226
199,1.7,NO ANSWER,0.0,0.0,0.0,0.9911107491226783
200,1.7,"A do...while loop will always execute atleast once, a while loop may never   execute depending on teh conditions.",5.0,5.0,5.0,0.9928761831765576
201,1.7,"a while loop is pre-check (it checks the condition statement before it executes the code within the while block)  a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)",5.0,5.0,5.0,0.9829213027905069
202,1.7,"))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. ",5.0,5.0,5.0,0.9773477492515317
203,2.1,"For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.",1.0,3.0,2.0,0.9782885923647745
204,2.1,The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.,4.0,4.0,4.0,0.9838879539988423
205,2.1,Information telling the compiler what data members and member functions belong to the class.,5.0,5.0,5.0,0.9873182121520854
206,2.1,"Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). ",5.0,5.0,5.0,0.9803862617735439
207,2.1,An object and data.,1.0,3.0,2.0,0.9896989412297816
208,2.1,"It's specific class name, includes only information defined by that class... implementation details... etc.",2.0,4.0,3.0,0.9816140233858033
209,2.1,data members and member functions.,5.0,5.0,5.0,0.9902032426815518
210,2.1,A class definition usually contains the function and its data members,5.0,5.0,5.0,0.9876011603790044
211,2.1,Data members and member functions,5.0,5.0,5.0,0.9902576696693207
212,2.1,member functions,3.0,4.0,3.5,0.9872409985236177
213,2.1,Member functions and data members belonging to the class.,5.0,5.0,5.0,0.9899057653535478
214,2.1,a public and private area that includes the functions and variables that are used in the class,5.0,4.0,4.5,0.9832859363126883
215,2.1,"the keyword class followed by they class name, on the inside you declare public and private declarations of your class",3.0,4.0,3.5,0.9733811720962426
216,2.1,A class definition typically includes function definitions.,3.0,3.0,3.0,0.9867936046254828
217,2.1,"It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.",5.0,5.0,5.0,0.9840580766810912
218,2.1,the data and methods ,5.0,4.0,4.5,0.9831176827306037
219,2.1,"A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",5.0,4.0,4.5,0.9955147577358736
220,2.1,Member functions and data members.,5.0,5.0,5.0,1.0
221,2.1,"public section and private section, and there must be a semicolon to set the end",1.0,4.0,2.5,0.9907654763125536
222,2.1,member funtions and data members,5.0,5.0,5.0,0.9902576696693207
223,2.1,Data members and Member functions,5.0,5.0,5.0,0.9902576696693207
224,2.1,data members and member functions,5.0,5.0,5.0,0.9902576696693207
225,2.1,"the class name and its public data types such as constructors, methods, functions.",2.0,5.0,3.5,0.9804797328417898
226,2.1,"a constructor and several data members, and at least one public data member or method",4.0,5.0,4.5,0.9946792417057817
227,2.1,"class name, two curly prenthesis, public and private",1.0,3.0,2.0,0.9837256519863118
228,2.1,data members and member functions,5.0,5.0,5.0,0.9902576696693207
229,2.1,Data and functions,5.0,4.0,4.5,0.9807445764802426
230,2.1,functions and data members that belong to the class,5.0,5.0,5.0,0.9874259029984984
231,2.1,"class variables, function definitions for the class",5.0,5.0,5.0,0.9904641309407584
232,2.1,"A class is an expanded concept of a data structure, it holds both the data and the functions being executed ",5.0,4.0,4.5,0.9888910958368583
233,2.2, Data members are the data components of a particular class.  A member function are the functioning components of the class.,1.0,5.0,3.0,0.9960512395416412
234,2.2, A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.,1.0,4.0,2.5,0.9917027318868439
235,2.2,"Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",4.0,5.0,4.5,0.9892808852351709
236,2.2,Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.,4.0,5.0,4.5,0.9955694303874397
237,2.2,A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.,5.0,5.0,5.0,0.9961824663835099
238,2.2,"A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",4.0,5.0,4.5,0.992208624999826
239,2.2,A local variable can only be accessed within the scope of its declaration.,3.0,4.0,3.5,0.995476065335019
240,2.2,Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.,4.0,5.0,4.5,0.9958397127122717
241,2.2,"data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.",3.0,5.0,4.0,0.9926231400374342
242,2.2,data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body,3.0,5.0,4.0,0.9956341336543705
243,2.2,"A data member is globally accessible, while a local variable is only accessible inside the member function.",4.0,5.0,4.5,0.9886181085589024
244,2.2,A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.,5.0,5.0,5.0,0.9963416206553274
245,2.2,Local variables are used only within the scope of its declaration,5.0,4.0,4.5,0.9954365137337854
246,2.2,"A data member is a more general term describing all objects instantiated within a member function.  ""Local"" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.",0.0,4.0,2.0,0.9913413720012941
247,2.2,A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.,2.0,5.0,3.5,0.9941082534885254
248,2.2,"local variables can only be used within the function, where as data members can be set to public access and can be used throughout",5.0,5.0,5.0,0.9925105552346499
249,2.2,"The local variable is lost once it exits the block of code, while the data member is not.",4.0,5.0,4.5,0.9934070288483272
250,2.2,Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.,4.0,5.0,4.5,0.9969427627485227
251,2.2,"data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes",5.0,5.0,5.0,0.9923660245489021
252,2.2,Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.,4.0,5.0,4.5,0.9956953827330314
253,2.2,"The data member can be accessed outside of the class, whereas the local variable cannot.",3.0,5.0,4.0,0.9970353178775102
254,2.2,"Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. ",5.0,5.0,5.0,0.9961369955843441
255,2.2,a local variable in a member function has to be static. a data member can change its value freely.,0.0,4.0,2.0,0.9938724944384384
256,2.2,"a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class",5.0,5.0,5.0,0.9913781100913561
257,2.2,Variable declared in a function defination's body cannot be used outside of that function.  Data members accessible only to member function of that class.,5.0,5.0,5.0,0.9965942538226035
258,2.2,"data members   local variables are declared in a function definitionâ€™s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   ",5.0,4.0,4.5,0.9947327730122573
259,2.2,local variable is only available in the function.,4.0,5.0,4.5,0.9905673126811819
260,2.2,local variables are accessed inside member functions only while data members   can be accessed throughout the class,4.0,5.0,4.5,0.9956332326235494
261,2.2,"A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.",5.0,5.0,5.0,0.9885317672685192
262,2.2,"a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. ",3.0,5.0,4.0,0.9897027757656048
263,2.3, A constructor initializes an object or objects of a class.  A function of a class performs a task such as display a line of text or do some kind of mathematical operations.,2.0,3.0,2.5,0.9920445217838751
264,2.3,"all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.",2.0,4.0,3.0,0.9856466862179318
265,2.3,"Unlike regular functions, constructors are only used to initialize an objectâ€™s data when it is created. Constructors must also be given the same name as the class and cannot return any values. ",5.0,5.0,5.0,0.994526148250376
266,2.3,"A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.",4.0,5.0,4.5,0.9925323846369037
267,2.3,"Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.",3.0,5.0,4.0,0.9907084598331526
268,2.3,A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.,2.0,4.0,3.0,0.9901854483983175
269,2.3,A constructor is called whenever a new object of that class is made.,4.0,3.0,3.5,0.9935421804678121
270,2.3,A constructor does not return any date and has no return type.  Functions can return date or not return data can have a return type.,3.0,5.0,4.0,0.9892814618662443
271,2.3,"A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user. ",4.0,4.0,4.0,0.99780613165575
272,2.3,"constructors cannot return values, so they cannot specify a return type like functions can.",3.0,5.0,4.0,0.990718182841054
273,2.3,A constructor is a function used to initialize an object's data when it is created.,4.0,3.0,3.5,0.9939412091338614
274,2.3,a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.,2.0,3.0,2.5,0.9913652752889721
275,2.3,A constructor initialized values at the execution of its instantiation. It provides default values.,4.0,3.0,3.5,0.9898099848424955
276,2.3,"A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",4.0,4.0,4.0,0.993132925558255
277,2.3,"A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.",3.0,3.0,3.0,0.9930852626849604
278,2.3,a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either. ,3.0,5.0,4.0,0.9905517451089957
279,2.3,"a constructor does not need a type, and it is used to initialize the variables.",3.0,4.0,3.5,0.9853777902641068
280,2.3,Constructors don't have a return type.,3.0,5.0,4.0,0.9893106128522694
281,2.3,constructor creates the class object into memory where functions perform actions against that object,2.0,4.0,3.0,0.9895408744825013
282,2.3,constructors cannot return values,3.0,5.0,4.0,0.9815412183173091
283,2.3,A constructor initializes values and a function usual performs some sort of operation.,2.0,3.0,2.5,0.9918098563747465
284,2.3,A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.,5.0,5.0,5.0,0.9928742506132712
285,2.3,A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.,4.0,4.0,4.0,0.9924655737154843
286,2.3,"a constructor is a function that initializes a class instance, a function performs whatever task it is written for",2.0,4.0,3.0,0.9942027787185501
287,2.3,"A constructor cannot return values, not even void, but function get a return value.",3.0,5.0,4.0,0.991673907857404
288,2.3,"a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.",5.0,5.0,5.0,0.9914750707141119
289,2.3,A constructor initializes an object. A function is part of an object.,1.0,4.0,2.5,0.9932538808145349
290,2.3,constructors initialize the data that is then used in the calculations of a   function,2.0,3.0,2.5,0.9911709204468312
291,2.3,"a constructor is called when the class is created, a function can be called any time.",4.0,3.0,3.5,0.9932324606382728
292,2.3,"constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. ",4.0,4.0,4.0,0.9939891076979465
293,2.4,The compiler creates a default constructor when we do not define one in our class file,5.0,5.0,5.0,0.9898555473753707
294,2.4,during compilation,2.0,5.0,3.5,0.9769250490753505
295,2.4,When the class does not explicitly include a constructor.,5.0,5.0,5.0,0.9826391399689997
296,2.4,When no parameters are set is when a default constructor is used.  ,3.0,3.0,3.0,0.9877853521164851
297,2.4,When a class does not explicitly include a constructor.,5.0,5.0,5.0,0.98397672963409
298,2.4,When there are no arguments passed.,1.0,2.0,1.5,0.9822783805312382
299,2.4,when there is not one already for a specific class,5.0,5.0,5.0,0.9772148220079567
300,2.4,When it the programs compiles,2.0,5.0,3.5,0.9803137710383841
301,2.4,when a constructor is not provided by the programmer of the class,5.0,5.0,5.0,0.9857742958848775
302,2.4,In any class that does not explicitly include a constructor.,5.0,5.0,5.0,0.979849290417203
303,2.4,Before the main function of the code.,0.0,2.0,1.0,0.9785709816237171
304,2.4,whenevery you dont specifiy your own,5.0,5.0,5.0,0.9842292787372634
305,2.4,When non are provided,5.0,5.0,5.0,0.9745538910081041
306,2.4,C++ will create a default constructor when no other constructor is present.,5.0,5.0,5.0,0.9880538798416025
307,2.4,"When no constructor was specified in the constructor's class, but the class is instantiated in a program.",5.0,5.0,5.0,0.9923067309653143
308,2.4,"When no constructor exists when one is needed, a parameterless default constructor is declared.",5.0,5.0,5.0,0.9958670203030224
309,2.4,"The Compiler creates this automatically for you, unless you specifically create one.",5.0,5.0,5.0,0.9924061719741833
310,2.4,In any class that doesn't explicitly include a constructor.,5.0,5.0,5.0,0.9818772376671636
311,2.4,when no user-defined constructor exists,5.0,5.0,5.0,0.9793090103559285
312,2.4,"If a class does not explicitly include a constructor, the compiler creates one.",5.0,5.0,5.0,0.9905873963749466
313,2.4,When you do not provide your own constructor.,5.0,5.0,5.0,0.9812041260322115
314,2.4,When a class does not explicitly include a constructor.,5.0,5.0,5.0,0.98397672963409
315,2.4,C++ creates a default constructor during compilation if one is not provided.,5.0,5.0,5.0,0.9888146315588641
316,2.4,when a class does not explicitly include a constructor,5.0,5.0,5.0,0.9796874792920426
317,2.4,The compiler will provide one when class does not explictly include a consructor.,5.0,5.0,5.0,0.9891240969084117
318,2.4,when the programmer does not explicitly include a constructor,5.0,5.0,5.0,0.9809685995359905
319,2.4,When one is not explicitly stated.,5.0,5.0,5.0,0.9817089351524476
320,2.4,when one is not explicitly included by a class ,5.0,5.0,5.0,0.9801379659194057
321,2.4,When you dont specify any constructors.,5.0,5.0,5.0,0.9844028974379587
322,2.4,"at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user",5.0,5.0,5.0,0.992284981907211
323,2.5,Just one per class.,0.0,0.0,0.0,0.9882808948937409
324,2.5,As many as you want so long as they have different parameters.,5.0,5.0,5.0,0.9933793060119691
325,2.5,"There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",5.0,5.0,5.0,0.9873715818723146
326,2.5,It depends what type of class is being defined.  Typically you would have a constructor call for each object.,1.0,2.0,1.5,0.9870161790906548
327,2.5,"In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.",5.0,5.0,5.0,0.9862946193372888
328,2.5,1,0.0,0.0,0.0,0.9749136293443724
329,2.5,any number you want,5.0,5.0,5.0,0.9924418474250436
330,2.5,One,0.0,0.0,0.0,0.9806875159845175
331,2.5,"by default just one, but they may be overloaded to create as many constructors as necessary",5.0,5.0,5.0,0.9845816434408352
332,2.5,as many as you want,5.0,5.0,5.0,0.9913499795754215
333,2.5,"As many as you want, with different parameters.",5.0,5.0,5.0,0.9928664235145004
334,2.5,infinite,5.0,5.0,5.0,0.912537984127225
335,2.5,as many as you need,5.0,5.0,5.0,0.9889615691854062
336,2.5,"As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",5.0,5.0,5.0,0.9837725048864883
337,2.5,"A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.",5.0,5.0,5.0,0.9818862521540179
338,2.5,It depends on the number of objects. Each object should have a constructor.,1.0,4.0,2.5,0.9926404127240358
339,2.5,"Theoretically unlimited, as long as they are defined by the programmer.",5.0,5.0,5.0,0.9877434282630401
340,2.5,As many as needed.,5.0,5.0,5.0,0.9975120517708346
341,2.5,as many as wanted/needed,5.0,5.0,5.0,0.9907587425708099
342,2.5,several,4.0,5.0,4.5,0.9806875159845175
343,2.5,One,0.0,0.0,0.0,0.9806875159845175
344,2.5,one,0.0,0.0,0.0,0.9622906414331676
345,2.5,There can be infinite constructors as long as the signature is different.,5.0,5.0,5.0,0.9906763924998977
346,2.5,that depends on the number of data members in the class,0.0,3.0,1.5,0.9893162540886674
347,2.5,one,0.0,0.0,0.0,0.9622906414331676
348,2.5,you can overload constructors as you need,5.0,5.0,5.0,0.9890666072361523
349,2.5,As many as the programmer wants to create. ,5.0,5.0,5.0,0.9953510600596776
350,2.5,one,0.0,0.0,0.0,0.9622906414331676
351,2.5,"as many as you want, as long as they each have a unique argument list",5.0,5.0,5.0,0.9868532037648848
352,2.5,as many as the user decides to use. ,5.0,5.0,5.0,0.9925227869950317
353,2.6, A function definition does not require any additional information that needs to be passed inside its parenthesis  to execute. While a definition prototype requires more than one parameters to be passed in order to complete its  task.,5.0,3.0,4.0,0.9852144232780409
354,2.6,"The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.",1.0,4.0,2.5,0.9841587389537124
355,2.6,"A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",5.0,5.0,5.0,0.9939820355807114
356,2.6,Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.,3.0,3.0,3.0,0.990934844059499
357,2.6,"A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.",5.0,5.0,5.0,0.990140839056453
358,2.6,A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.,5.0,4.0,4.5,0.9855518929761251
359,2.6,prototype only tells the user what data types go into a function and what type is returned.,5.0,4.0,4.5,0.986231199150799
360,2.6,Function prototype is located in the .h file and only contains the access function name and paramater type.  Function definition contains the code for the function to perform its activity.,4.0,5.0,4.5,0.9857875644173609
361,2.6,"a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...",4.0,4.0,4.0,0.9893438945005152
362,2.6,A function prototype describes a class's public interface without revealing the class's member function implementations,5.0,4.0,4.5,0.984207702017027
363,2.6,"Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",1.0,3.0,2.0,0.9868317345389801
364,2.6,a prototype does not include any actual code where the function has all the code that is executed in the program.,3.0,3.0,3.0,0.9803882541554109
365,2.6,a prototype declares what will be used in the program and the definition ,3.0,3.0,3.0,0.9819177949268899
366,2.6,"A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.",5.0,5.0,5.0,0.9931214777677286
367,2.6,"A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.",5.0,5.0,5.0,0.9935266135111971
368,2.6,"A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.",3.0,4.0,3.5,0.9925476081509481
369,2.6,the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.,5.0,4.0,4.5,0.9830639225420151
370,2.6,A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.,5.0,4.0,4.5,0.9865334978622897
371,2.6,"prototype states all functions in that class before compilation, where the definition actually holds the source for the functions",3.0,4.0,3.5,0.986905818410907
372,2.6,"Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",5.0,5.0,5.0,0.9942052594191056
373,2.6,A function prototype just specifies parameters.  A function definition includes parameters and a code body.,4.0,4.0,4.0,0.9833200544715407
374,2.6,Function prototypes describe the class's public interface,5.0,4.0,4.5,0.9819559530597058
375,2.6,"A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function ",4.0,5.0,4.5,0.992643622446449
376,2.6,"a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code",4.0,4.0,4.0,0.9942910292936713
377,2.6,"A functgion prototype is a declaration of a function , while function definition specifies what a function does",3.0,4.0,3.5,0.9889059012486494
378,2.6,"in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. ",5.0,5.0,5.0,0.9870396564831682
379,2.6,"A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",5.0,4.0,4.5,0.987599955132532
380,2.6,"function prototype describe the class's public interface without revealing   the class's member function implementations,  function definitions show what   implementations are being done",5.0,4.0,4.5,0.9900211234246956
381,2.6,"A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.",5.0,5.0,5.0,0.9963581257989937
382,2.6,function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.  ,5.0,4.0,4.5,0.9829286510242398
383,2.7,the role of a header file list all the functions a class can do while hiding the inner workings of its functions ,5.0,4.0,4.5,0.9895769782109957
384,2.7,The main role of header file is it is used to share information among various files.,3.0,3.0,3.0,0.9907921148072744
385,2.7,Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.,4.0,3.0,3.5,0.989019769957301
386,2.7,No,0.0,0.0,0.0,0.9674851858593443
387,2.7,"A header file consists of ""reusable"" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain ""source-code.""",4.0,3.0,3.5,0.9860789200091564
388,2.7,"To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",5.0,4.0,4.5,0.990118816736981
389,2.7,the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.,5.0,4.0,4.5,0.9866012669636708
390,2.7,Header files declares the class member functions.,3.0,4.0,3.5,0.9906402415934301
391,2.7,A header file allows for the separation of declaration and implementation into separate files. ,5.0,3.0,4.0,0.9887291557122359
392,2.7,the header file has access to the C++ Standard Library and makes certain classes like class string work.,0.0,3.0,1.5,0.9889796473016952
393,2.7,â€œInstructâ€ the compiler on how to interface with library and user-written components.,2.0,3.0,2.5,0.9881524934238537
394,2.7,create a comon area to contain reusable functions.,3.0,3.0,3.0,0.9906683652290931
395,2.7,to declare the functions being used in the classes,3.0,3.0,3.0,0.9911458449808547
396,2.7,"#include ""hat.h""  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().",0.0,3.0,1.5,0.9839822424967783
397,2.7,To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.,5.0,3.0,4.0,0.9889519860715871
398,2.7,a header file is a file used to store a list of prototye functions and data members.,5.0,5.0,5.0,0.991561898264144
399,2.7,"A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",3.0,4.0,3.5,0.9869449988250238
400,2.7,It contains reusable source code for use by other classes.,3.0,3.0,3.0,0.9868499741481667
401,2.7,"to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.",4.0,3.0,3.5,0.9855015105122281
402,2.7,Header files have reusable source code in a file that a programer can use. ,3.0,2.0,2.5,0.9875803112104644
403,2.7,To hide the definition and details of a class.  Also to help readability of the main C++ file.,4.0,3.0,3.5,0.9879372218570912
404,2.7,To allow the compiler to recognize the classes when used elsewhere.,3.0,4.0,3.5,0.9881588325424077
405,2.7,"A header file declares a class, its data, and functions available through that class.",5.0,3.0,4.0,0.9942229165325912
406,2.7,header files contain code which can be used in multiple files,3.0,3.0,3.0,0.9877448824888588
407,2.7,Allow compiler to recognize the classes when used elsewhere,3.0,3.0,3.0,0.989198131149607
408,2.7,Allow compiler to recognize the classes when used elsewhere ,3.0,4.0,3.5,0.989198131149607
409,2.7,To promote function reusuablitly,3.0,3.0,3.0,0.9875469564955063
410,2.7,class definitions are placed here,3.0,3.0,3.0,0.9881488569290304
411,2.7,A header file usually contains class and/or function prototypes.,4.0,5.0,4.5,0.9882300524606681
412,2.7,contains all the standard C++ library's i.e. string ,0.0,2.0,1.0,0.9874297612717111
413,3.1,"It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.",4.0,5.0,4.5,0.9926743347456704
414,3.1,it includes the specific information about the function such as input and output variable types and how many of each.,1.0,5.0,3.0,0.9926960671248315
415,3.1,The function signature includes the name of the function and the types of its arguments.,5.0,5.0,5.0,0.9950317945138314
416,3.1,"A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",4.0,5.0,4.5,0.9849969081637822
417,3.1,It includes the name of the function and the types of its arguments.,5.0,5.0,5.0,0.997424485089338
418,3.1,"Name, paramaters, scope, and other general function information",4.0,5.0,4.5,0.9743407534777515
419,3.1,It includes a function name and parameter list. Does not include return type. Function signatures must be different.,5.0,5.0,5.0,0.9904016996527649
420,3.1,input parameters and return type,1.0,5.0,3.0,0.988625620085483
421,3.1,The portion of the function prototyp tha has the function name and the arguments but NOT the return type.,5.0,5.0,5.0,0.9935221260626182
422,3.1,Name of the function and the types of it's arguments,5.0,5.0,5.0,0.9968854328747206
423,3.1,The name of the function and the types of its arguments.,5.0,5.0,5.0,0.9998162956494708
424,3.1,Includes the name of the function and the types of its arguments.,5.0,5.0,5.0,0.9978299943661466
425,3.1,"identification of a function and the data types of its parameters, it has the name, and the data type variables ",5.0,5.0,5.0,0.9906003489241915
426,3.1,"a return type, and input parameters",1.0,5.0,3.0,0.9856285158647972
427,3.1,The function signature includes the method name and the input types. ,5.0,5.0,5.0,0.9925932235093087
428,3.1,"A function signature includes the name of the function and types of arguments, but not the return type.  ",5.0,5.0,5.0,0.993546342320946
429,3.1,The signature can include a result type and thrown errors. ,1.0,3.0,2.0,0.9886779563439672
430,3.1,"function name, and input paramaters",5.0,5.0,5.0,0.9880790594561479
431,3.1,"The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",5.0,5.0,5.0,0.995850952779091
432,3.1,the name of the function and the types of its arguments,5.0,5.0,5.0,0.9958767023489316
433,3.1,A function signature includes the name of the function and the types of its arguments,5.0,5.0,5.0,0.9949941699924132
434,3.1,"A function signature includes a function's return type, parameters and semi-colon.",1.0,5.0,3.0,0.9869410712369214
435,3.1,the name of the function and the types of its arguments,5.0,5.0,5.0,0.9958767023489316
436,3.1,the function's name and parameters,5.0,5.0,5.0,0.9923199645990667
437,3.1,The name of the function and the types of its arguments.,5.0,5.0,5.0,0.9998162956494708
438,3.1,The portion of a function prototype that includes the name of the function and the types of its arguments,5.0,5.0,5.0,0.9940040038566389
439,3.1,the name of the function and its parameters,5.0,5.0,5.0,0.9947583674499585
440,3.1,The function name and parameters,5.0,5.0,5.0,0.9915334740808608
441,3.1,name of function and types of arguments,5.0,5.0,5.0,0.994158542866849
442,3.1,a function's return type and parameter list,1.0,5.0,3.0,0.9908803872224028
443,3.1,"it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. ",5.0,5.0,5.0,0.9946830262968039
444,3.2,Any functions that follows their deceleration that  are in the source code file are allowed to have access the variables.  Also global scope variables retrain their value throughout the execution of the program.,5.0,5.0,5.0,0.9855609358974443
445,3.2,they can be accessed by any C++ file anywhere.,0.0,5.0,2.5,0.9872149038918551
446,3.2,Global variables have file scope.,5.0,5.0,5.0,0.9964122095249863
447,3.2,The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.,0.0,5.0,2.5,0.985925092207257
448,3.2,A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.,5.0,5.0,5.0,0.990445651593693
449,3.2,Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included,3.0,5.0,4.0,0.9921066219438571
450,3.2,They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.,5.0,5.0,5.0,0.9865497829935962
451,3.2,can be accesed by any classes that have and object of that variables class in it,1.0,5.0,3.0,0.9892804944147098
452,3.2,Global variables have file-scope.  The variable is know to all functions throught the file,5.0,5.0,5.0,0.9946387170363782
453,3.2,The entire program,4.0,5.0,4.5,0.9896213703266885
454,3.2,They have file scope when placed outside a function.,5.0,5.0,5.0,0.9942908842109025
455,3.2,File scope.,5.0,5.0,5.0,1.0
456,3.2,They can be used throughout the program,4.0,5.0,4.5,0.9927288860596716
457,3.2,Global variable can b accessed by any class wit an object in the variables class,1.0,5.0,3.0,0.9914886221328914
458,3.2,The scope of global variables is at the file level.,5.0,5.0,5.0,0.994497637049283
459,3.2,Global variables all have file scope.,5.0,5.0,5.0,0.9956770915592432
460,3.2,it is accessible by all functions within a program,4.0,5.0,4.5,0.9911838021168832
461,3.2,"variables accessible anywhere in the program, as long as they are public.",4.0,5.0,4.5,0.9905045449164743
462,3.2,They can be referenced by any function following their declaration or definition inside the source file.,5.0,5.0,5.0,0.9933071334578363
463,3.2,"globally, anywhere in the program.",4.0,5.0,4.5,0.9887885513547321
464,3.2,Global variables have a file scope,5.0,5.0,5.0,0.9968813386554235
465,3.2,The entire program.,4.0,5.0,4.5,0.9900391645455597
466,3.2,throughout the execution of the program,4.0,5.0,4.5,0.9828885815866832
467,3.2,"If a variable is declared global, any function or class can use that variable.",4.0,5.0,4.5,0.9905920691885518
468,3.2,The entire program or file.,5.0,5.0,5.0,0.9913938724656578
469,3.2,throught the programm,4.0,5.0,4.5,0.9922781352012883
470,3.2,the whole code,4.0,5.0,4.5,0.9785113822037652
471,3.2,File scope,5.0,5.0,5.0,0.9979799792449989
472,3.2,can be referenced by any function that follows their declarations or definitions in the source file,5.0,5.0,5.0,0.9909613846504988
473,3.2,global variables have program scope (accessible anywhere in program),4.0,5.0,4.5,0.9919444234824434
474,3.2,variables that exist throught the entire script. their values can be changed anytime in the code and fucntions. ,4.0,5.0,4.5,0.9863867761979179
475,3.3,It expands the function's definition in that place.  Once the functions is called you can use it as many times as you need.  The compiler just expands on the function.,4.0,5.0,4.5,0.9949030618172585
476,3.3,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code â€” optimize the called code into the caller.   ",4.0,5.0,4.5,0.9806123459082476
477,3.3,The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.,5.0,5.0,5.0,0.9928549389402569
478,3.3,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2.0,4.0,3.0,0.9930394174517534
479,3.3,"Placing the qualifier inline before a function's return type in the function definition ""advises"" the compiler to generate a copy of the function's code in place to avoid a function call.",5.0,5.0,5.0,0.9953813929338042
480,3.3,You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.,0.0,4.0,2.0,0.9903671759830048
481,3.3,"It expands a small function out... making your code longer, but also makes it run faster.",4.0,4.0,4.0,0.9919401672081521
482,3.3,the function is not treated as a separate unit like other functions,4.0,3.0,3.5,0.9913959532332394
483,3.3,"When the program compiles,it will copy the function inplace, avoiding a function call.",5.0,5.0,5.0,0.9885827480404434
484,3.3,"It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",5.0,5.0,5.0,0.993061404490417
485,3.3,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2.0,4.0,3.0,0.9930394174517534
486,3.3,Ignores the inline qualifier and typically does so for all but the smallest functions.,2.0,4.0,3.0,0.9947645909800997
487,3.3,If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.,5.0,4.0,4.5,0.9917890528706015
488,3.3,it treats them as the same function,2.0,2.0,2.0,0.9896394495618815
489,3.3,"Inline functions are copied in place, instead of being referenced.",5.0,5.0,5.0,0.9884027534045715
490,3.3,"For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.",5.0,5.0,5.0,0.9901874528692038
491,3.3,it generates a copy of the function's coding which eliminates calling the function,5.0,5.0,5.0,0.9963365050616119
492,3.3,not answered,0.0,0.0,0.0,0.9741811535338363
493,3.3,It generates a copy of the function's code by by inserting it in the program.,4.0,5.0,4.5,0.9981246414094757
494,3.3,"tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.",5.0,5.0,5.0,0.9965920564464584
495,3.3,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2.0,2.0,2.0,0.9930394174517534
496,3.3,"Multiple copies of the function code are inserted into the program, making it bigger.",4.0,5.0,4.5,0.9928875336246926
497,3.3,compiler ignores inline qualifier,2.0,3.0,2.5,0.9866410824073728
498,3.3,"It generates a copy of the function, if it is needed again.",2.0,5.0,3.5,0.9951219980252516
499,3.3,"The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",5.0,5.0,5.0,0.9869970443212479
500,3.3,Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call,5.0,5.0,5.0,0.9960301941915561
501,3.3,"instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",5.0,5.0,5.0,0.9924086774219218
502,3.3,Expands the function into the program,4.0,4.0,4.0,0.9930249915203702
503,3.3,it generates a copy of the functions code in place to avoid a function call,5.0,5.0,5.0,0.9970124149584468
504,3.3,the function call will be replaced by the code that was defined in the inline function,5.0,5.0,5.0,0.9916675102186693
505,3.3,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code â€” optimize the called code into the caller. ",4.0,5.0,4.5,0.9806123459082476
506,3.4,Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.,5.0,5.0,5.0,0.9811828450669562
507,3.4,because you can't change the original and passing by reference limits memory needed for the program.,5.0,4.0,4.5,0.9899327013086818
508,3.4,Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.,5.0,5.0,5.0,0.992724087781178
509,3.4,"It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",5.0,5.0,5.0,0.9863024931641495
510,3.4,"Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.",5.0,5.0,5.0,0.9858223998349255
511,3.4,You do not alter the original value of the variable that was passed.,3.0,3.0,3.0,0.9895474102365595
512,3.4,Don't have to make copies of stuff.,4.0,5.0,4.5,0.9966062786129097
513,3.4,you do not use unessesary memory space to copy variables between functions,5.0,5.0,5.0,0.9875539233321361
514,3.4,It elimitates the need to copy large amonts of data,5.0,5.0,5.0,0.9887692556040815
515,3.4,The function can change the data stored in a variable passed by reference directly.,3.0,4.0,3.5,0.99502750299718
516,3.4,Gives called function the ability to access and modify the callerâ€™s argument data.,3.0,4.0,3.5,0.9950165557094944
517,3.4,Gives called function the ability to access and modify the callerâ€™s argument data directly.,3.0,4.0,3.5,0.9948722411374474
518,3.4,It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.,3.0,3.0,3.0,0.9907972366054779
519,3.4,you don't make another copy and waste memory,5.0,5.0,5.0,0.9876123177896078
520,3.4,"Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",5.0,5.0,5.0,0.9934780355669593
521,3.4,"If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function.  Also pass by reference gives the function called the permission to read edit the argument directly.",5.0,5.0,5.0,0.9893867818855043
522,3.4,"Gives access to the caller data directly, also it allows for modifying the data.",3.0,4.0,3.5,0.9892711713242637
523,3.4,"less overhead overall, and you modify the variable directly.",4.0,3.0,3.5,0.9912327777776117
524,3.4,The original variable being referenced can be modified directly by the called function.  ,3.0,3.0,3.0,0.9973556198294147
525,3.4,gives function ability to access and modify the caller's argument data directly,3.0,4.0,3.5,0.9962535038060298
526,3.4,Gives the called function the ability to access and modify the caller's argument data directly.,3.0,3.0,3.0,0.9929895892499067
527,3.4,"Less overhead than passed by value, especially when using large numbers.",4.0,3.0,3.5,0.9909170053035656
528,3.4,"large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed ",5.0,5.0,5.0,0.9940873407676954
529,3.4,The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.,4.0,4.0,4.0,0.9957791260298707
530,3.4,Functions can directly modify arguments that are passed by reference.,3.0,4.0,3.5,0.9939512599373593
531,3.4,It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata,5.0,5.0,5.0,0.9944848278096236
532,3.4,"it takes less memory, thus it would make the program faster",4.0,4.0,4.0,0.9893107367496554
533,3.4,You are able to modify the variable that is referenced directly.,3.0,4.0,3.5,0.9920709517005759
534,3.4,"if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",3.0,4.0,3.5,0.9858851875016287
535,3.4,"only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.",5.0,5.0,5.0,0.9868136357284374
536,3.4,"Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",3.0,3.0,3.0,0.9911750210887844
537,3.5,"The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9967736815254704
538,3.5,They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.,4.0,2.0,3.0,0.989857151782024
539,3.5,"The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",5.0,5.0,5.0,0.9939078707543184
540,3.5,"Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",5.0,5.0,5.0,0.9937475636632894
541,3.5,"The compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9950813682516156
542,3.5,"By the type they are initilized with (int, char, etc.)",2.0,4.0,3.0,0.9854320452626458
543,3.5,"It selects the proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9961081757094967
544,3.5,overloaded functions must have the same return type but different input parameters,1.0,5.0,3.0,0.9906045348151424
545,3.5,"It examines the names, types, and order of arguments on each function.",5.0,5.0,5.0,0.9942901617185519
546,3.5,unique function signatures,5.0,5.0,5.0,0.9864817680312024
547,3.5,"Is based on number, types, and order of arguments in the function call.",5.0,5.0,5.0,0.9932409918690378
548,3.5,"Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9946891349364262
549,3.5,not answered,0.0,0.0,0.0,0.9741811535338363
550,3.5,"they have to have same return type, but different input parameters",1.0,5.0,3.0,0.989949829069077
551,3.5,Overloaded functions are differentiated by their parameters.,4.0,5.0,4.5,0.9912924776895535
552,3.5,"The compiler selects the right function to execute from the number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9969096126960297
553,3.5,it creates a set of candidate functions then a set of viable functions,3.0,3.0,3.0,0.9896710846694294
554,3.5,their function signature.,5.0,5.0,5.0,0.9885455074684665
555,3.5,The number and type of its parameters.,5.0,5.0,5.0,0.9880878534991925
556,3.5,by their function signature,5.0,5.0,5.0,0.9851424943660002
557,3.5,"They have the same name, just different parameters.",3.0,4.0,3.5,0.994279597213397
558,3.5,"They are differntiated by number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9925213055794682
559,3.5,"it looks at the number, types, and order of arguments in the function call ",5.0,5.0,5.0,0.991245889649602
560,3.5,The compiler differentiates overloaded functions by their signature.,5.0,5.0,5.0,0.99063162262065
561,3.5,"By the number, types, and order of their arguments",5.0,5.0,5.0,0.9926536166313563
562,3.5,"Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9946891349364262
563,3.5,paremeters,4.0,5.0,4.5,0.9547590291196548
564,3.5,"By the number, and the types and order of the  parameters.",5.0,5.0,5.0,0.9927724522099998
565,3.5,by the number and type of arguments,5.0,5.0,5.0,0.9839899355117193
566,3.5,"by their signature (return type, argument list)",3.0,5.0,4.0,0.9898778671937833
567,3.5,overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing. ,1.0,5.0,3.0,0.992464769737139
568,3.6,"A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   ",5.0,5.0,5.0,0.9900433221760059
569,3.6,badly designed algorithyms. using recursion for a non recursive problem.,2.0,3.0,2.5,0.987835639574914
570,3.6,Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,5.0,5.0,5.0,0.9942763404782452
571,3.6,"Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  ",5.0,5.0,5.0,0.9940609502030143
572,3.6,Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion. ,5.0,5.0,5.0,0.994822073059261
573,3.6,Not having a base case that returns a base value.,3.0,5.0,4.0,0.9905334634915608
574,3.6,Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).,5.0,5.0,5.0,0.9896403123838664
575,3.6,no base case no change in values.,4.0,5.0,4.5,0.986996253008886
576,3.6,"If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",5.0,5.0,5.0,0.9938273361536908
577,3.6,Omitting the base case or incorrectly calling the recursive step.,5.0,5.0,5.0,0.9925673257082476
578,3.6,The recursive problem cannot be reduced to reach the base case.,4.0,5.0,4.5,0.9918534197824208
579,3.6,"Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",5.0,5.0,5.0,0.9958197794776762
580,3.6,Not having the proper case to leave the recursion,3.0,5.0,4.0,0.991359715498716
581,3.6,"no base case, or the recursive calls do not converge to the base case",5.0,5.0,5.0,0.992565389487016
582,3.6,"No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",5.0,5.0,5.0,0.9934056361091294
583,3.6,"If the recursion function never reaches or successfully defines the base case it will recurse forever.  This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.",5.0,5.0,5.0,0.9910970990878772
584,3.6," not creating a base case, or in the case where the base case will never be met.",5.0,5.0,5.0,0.9935749827885189
585,3.6,improper handling of cases such that not all possible values are able to be handled.,2.0,5.0,3.5,0.9915471509264508
586,3.6,There is no base case. The recursion step doesn't reduce the problem during each recursive call.,4.0,5.0,4.5,0.992239637489505
587,3.6,"no base case, as in a single return that does not include calling the function again.  a static value to end at.",2.0,5.0,3.5,0.9920001915523458
588,3.6,"Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",5.0,5.0,5.0,0.9955552653204071
589,3.6,omitting the base case or writing the recursive call so that it does not converge upon the base case.,5.0,5.0,5.0,0.9920213777023944
590,3.6,"Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",5.0,5.0,5.0,0.9964301776296908
591,3.6,Infinite recursion may occur if no base case is defined or if the call is not varied.,4.0,5.0,4.5,0.9931223890147096
592,3.6,"Not having a base case, or building a recursion process that doesn't converge on the base case.",5.0,5.0,5.0,0.9915073151218352
593,3.6,"Either omitting the base case, or writing the recursion step incorerectly ",5.0,5.0,5.0,0.9965996616909232
594,3.6,no base case or if the programmar does not define the base case as the simplest case and it never gets reached,5.0,5.0,5.0,0.9910534871192774
595,3.6,No easily reached base case and no base case at all,5.0,5.0,5.0,0.9906466454225779
596,3.6,function is never allowed to reach the 'base case',5.0,5.0,5.0,0.990417039480168
597,3.6,"it has no base case, or the base case is never met",5.0,5.0,5.0,0.9900807169503832
598,3.6,recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,1.0,5.0,3.0,0.9890391009870307
599,3.7,"Both involve a controlled repetition structures, and they both have a termination test.  Also both of them can loop forever. ",5.0,5.0,5.0,0.9975908316898383
600,3.7,"As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.",1.0,3.0,2.0,0.99743320472192
601,3.7,Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.,5.0,5.0,5.0,0.9916404289400055
602,3.7,Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem,5.0,5.0,5.0,0.9889357432736773
603,3.7,"Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.",5.0,5.0,5.0,0.9959581243460761
604,3.7,"Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",5.0,5.0,5.0,0.9946493637955972
605,3.7,"Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.",3.0,5.0,4.0,0.9918751822723977
606,3.7,anything you can do iterativly you can do recursively,2.0,4.0,3.0,0.9779121711025347
607,3.7,Both are repetative and both have a end test.,4.0,5.0,4.5,0.989138651676454
608,3.7,"Incorrectly writing either can result in infinite loops, both perform the same task over and over.",3.0,4.0,3.5,0.9944167075001337
609,3.7,Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.  ,5.0,5.0,5.0,0.9901940347330466
610,3.7,"Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",5.0,5.0,5.0,0.992012353842724
611,3.7,not answered,0.0,0.0,0.0,0.9741811535338363
612,3.7,anything you can do recursively you can do iteratively,2.0,4.0,3.0,0.9779121711025347
613,3.7,"Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",2.0,5.0,3.5,0.9939632176695518
614,3.7,"Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit.  So both involve a termination test to find that limit and both slowly approach that termination limit.  Both are based on a control statement as well.    If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.",5.0,5.0,5.0,0.990589506524978
615,3.7,"both based on control statement, involve repetition, and involve a termination test within loops",5.0,5.0,5.0,0.9945531434895963
616,3.7,they are methods of repeating the same task.,1.0,3.0,2.0,0.9837800637560639
617,3.7,Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.,5.0,5.0,5.0,0.9889352617322654
618,3.7,"based on a control statement, involve repetition, involve a termination test.",5.0,5.0,5.0,0.990744636076336
619,3.7,Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5.0,5.0,5.0,0.9901940347330466
620,3.7,"both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",5.0,5.0,5.0,0.9928157291923996
621,3.7,"they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely",5.0,5.0,5.0,0.991549117024079
622,3.7,"They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.",5.0,5.0,5.0,0.9912302399530066
623,3.7,"Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their  termination requirements are not met.",5.0,5.0,5.0,0.9901087258378186
624,3.7,"both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",5.0,5.0,5.0,0.9914926685924689
625,3.7,they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).,3.0,4.0,3.5,0.9851590730601386
626,3.7,Based on control statement;  involve repetition; involve a terminal test; both can occur infinitly   ,5.0,5.0,5.0,0.9927640370239994
627,3.7,"repetition, termination test, eventually terminate, occur infinately",5.0,5.0,5.0,0.9925828422652829
628,3.7,both need to have some kind of base case to tell when the loop needs to stop.,3.0,3.0,3.0,0.9808159212122315
629,3.7,"they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",2.0,5.0,3.5,0.990368512577778
630,4.1,int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user,3.0,5.0,4.0,0.985448562781759
631,4.1,by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.,3.0,5.0,4.0,0.9889110593001849
632,4.1,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.,5.0,5.0,5.0,0.9920490411153016
633,4.1,Pass the length along with the array or use a vector.,2.0,4.0,3.0,0.9939861374387245
634,4.1,"One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.",5.0,5.0,5.0,0.9844517044581883
635,4.1,"In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}",5.0,5.0,5.0,0.9863897841823613
636,4.1,"1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)",5.0,5.0,5.0,0.971360042513483
637,4.1,statically and dynamically,2.0,3.0,2.5,0.9848320145153758
638,4.1,Explicitly int array[10]; or by variable const int size = 10; int array[size];,3.0,5.0,4.0,0.9856248983167789
639,4.1,"Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list. ",5.0,5.0,5.0,0.9836386637589027
640,4.1,Specify an arrays size with a constant variable. And setting array elements with calculations. ,2.0,5.0,3.5,0.9894324316245354
641,4.1,"statically, using {} and dynamically, using []",4.0,4.0,4.0,0.9909092266122012
642,4.1,"define it as array[5] or array[1,2,3,4,5]",4.0,5.0,4.5,0.9941613540381133
643,4.1,Static and dynamic.,2.0,3.0,2.5,0.9862994790492156
644,4.1,manually inside the brackets or automatically via an initializer list,5.0,5.0,5.0,0.995425884478592
645,4.1,"You can use an initializer list, or simply tell the compiler how many elements you want in the array.  For an Initializer list:  int a[] = {10, 2, 3, -4, 5};  For an elemental declaration: int b[5];  Both arrays have 5 elements in them, but array a is already initialized.",5.0,5.0,5.0,0.9784450508984918
646,4.1,"In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. ",4.0,5.0,4.5,0.9787173477642106
647,4.1,"Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration. ",5.0,5.0,5.0,0.9877171795915529
648,4.1,"Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }",5.0,5.0,5.0,0.9945338448632599
649,4.1,either initializing the array with a specific length or initializing an array while declaring its contents.,5.0,5.0,5.0,0.9914364781195601
650,4.1,within the brackets or by using an initializer list.,5.0,5.0,5.0,0.9954831664433524
651,4.1,specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,3.0,5.0,4.0,0.9908270444210839
652,4.1,with a number and with a variable,3.0,3.0,3.0,0.9873080166590832
653,4.1,"explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)",5.0,5.0,5.0,0.9757584969834731
654,4.1,"one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}",4.0,5.0,4.5,0.9865336881763515
655,4.1,1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable ,5.0,5.0,5.0,0.9901577003883163
656,4.1,"Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};",5.0,5.0,5.0,0.9883681210203353
657,4.1,user defined value or by the number of elements in initializer list,5.0,5.0,5.0,0.9935610011733965
658,4.1,"you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}",5.0,5.0,5.0,0.9834019667084332
659,4.1,"use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. ",3.0,5.0,4.0,0.9891043883522431
660,4.2,"strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole",1.0,4.0,2.5,0.9893120281872471
661,4.2,"the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.",1.0,5.0,3.0,0.9876150633926783
662,4.2,"Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",5.0,5.0,5.0,0.9871515490025868
663,4.2,"All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; ",5.0,5.0,5.0,0.9905196100173974
664,4.2,"By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.",1.0,4.0,2.5,0.9918471934082739
665,4.2,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays),0.0,4.0,2.0,0.9910019367440174
666,4.2,"They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.",2.0,5.0,3.5,0.9792231108934278
667,4.2,string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.,4.0,4.0,4.0,0.9914869799455219
668,4.2,"By using an array of characters, you are limited to the size of the array of characters.  By declaring by type the end of the string is acknowledged by white space.",3.0,4.0,3.5,0.9919692087932616
669,4.2,"The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly. ",5.0,5.0,5.0,0.9805987977487538
670,4.2,string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.,5.0,5.0,5.0,0.9959855307167175
671,4.2,A char array reads a string as each individual character. A string literal array reads the entire string.,2.0,4.0,3.0,0.9953941023247688
672,4.2,array of characters can only hold as many characters as the array size and strings are not that limited.,4.0,4.0,4.0,0.9958791476128359
673,4.2,"Stings can only be modified by functions of the String class, an array of characters can be modified by the user",3.0,4.0,3.5,0.9915520240416379
674,4.2,"if by type string, the array contains an additional terminating null character",3.0,5.0,4.0,0.9871887898130304
675,4.2,The array of characters has a null character \0 at the end of the array to signify the array's end.  The string does not have this.,5.0,5.0,5.0,0.9947739845881588
676,4.2,strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.,2.0,4.0,3.0,0.9845979065697589
677,4.2,"the array of characters has a set length, while the type string has virtually unlimited length.",4.0,4.0,4.0,0.9905016603077913
678,4.2,Char array - Individual letters can be accessed directly with array subscript notation.  String array - array subscript will return the entire string.,1.0,3.0,2.0,0.9903982164906614
679,4.2,array of characters need a termination character as well as size specification whether its explicit or implicit.,5.0,5.0,5.0,0.9917902083892908
680,4.2,when using an array individual characters can be accessed and manipulated.,1.0,4.0,2.5,0.9936046589927406
681,4.2,strings declared using an array of characters could result in data loss if character array not initialized large enough.,4.0,4.0,4.0,0.996899253605672
682,4.2,"an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",3.0,4.0,3.5,0.9913340303708726
683,4.2,"the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.",3.0,4.0,3.5,0.987251942558381
684,4.2,"declaring a string, it includes white spaces but declaring a array of character does not include white spaces",0.0,3.0,1.5,0.9904870461013852
685,4.2,"an array of characters has one element a string doesnt have. it is the termination element, or ""null""",5.0,5.0,5.0,0.9945210697153113
686,4.2,Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.,4.0,4.0,4.0,0.995924582901387
687,4.2,"cant modify individual characters of a type string array, character type array can modify individual characters",1.0,4.0,2.5,0.9956338886544679
688,4.2,"the type string is a class and is safer, while the other is just an array of characters.",3.0,4.0,3.5,0.9815729378077174
689,4.2,"array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type ",1.0,4.0,2.5,0.972197409785238
690,4.3,by reference only,5.0,5.0,5.0,0.9965965965658284
691,4.3,a reference pointer to an element in the array.,4.0,5.0,4.5,0.9927389863505267
692,4.3,Arrays are passed to functions by reference.,5.0,5.0,5.0,0.9931976882177419
693,4.3,-Arrays are passed by reference         -Individual array elements passed by value        -Functions that take arrays as arguments         -Function prototypes may include parameter names        -const array parameters,5.0,5.0,5.0,0.9828401324300986
694,4.3,Arrays are passed by reference.,5.0,5.0,5.0,0.994256139735084
695,4.3,"you must pass the array and its size to the function. Ex. function(array, size);",4.0,4.0,4.0,0.9847046215359161
696,4.3,"Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.",3.0,4.0,3.5,0.9648264373101412
697,4.3,you pass a pointer to the first item and also pass the size.,4.0,3.0,3.5,0.9895267319194667
698,4.3,By reference.,5.0,5.0,5.0,0.9926872584041498
699,4.3,"In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.",4.0,4.0,4.0,0.9762754239420469
700,4.3,Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.   ,5.0,5.0,5.0,0.983316852848524
701,4.3,Arrays are passed by reference.,5.0,5.0,5.0,0.994256139735084
702,4.3,the same way but with [] at the declaration and the actual function.,3.0,3.0,3.0,0.9852573915034792
703,4.3,specify the array name without brackets.,3.0,3.0,3.0,0.9888232043750208
704,4.3,by reference,5.0,5.0,5.0,0.9961435971075943
705,4.3,"You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]);  It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory.  This gives the function complete control over the array however.",5.0,5.0,5.0,0.9438211246464139
706,4.3,They are called by the function then the function must loop through the array to get the set of characters. ,1.0,3.0,2.0,0.9851951357951525
707,4.3,"by reference by default, unless you specify const, at which the later will make the array unmodifiable.",5.0,5.0,5.0,0.9845366065483591
708,4.3,"The function recieves both the array and the array size as parameters. function(arrayName, arraySize)",4.0,4.0,4.0,0.9835324273358
709,4.3,specifying array name and passing as reference in an argument into the function,5.0,5.0,5.0,0.9880639281391654
710,4.3,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.,4.0,4.0,4.0,0.9789750922533176
711,4.3,"arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",5.0,5.0,5.0,0.9770367682198535
712,4.3,by reference only,5.0,5.0,5.0,0.9965965965658284
713,4.3,by reference,5.0,5.0,5.0,0.9961435971075943
714,4.3,by reference,5.0,5.0,5.0,0.9961435971075943
715,4.3,by refrence,5.0,5.0,5.0,0.9961435971075943
716,4.3,"function( int [], int length)",4.0,4.0,4.0,0.9747101937675763
717,4.3,by reference,5.0,5.0,5.0,0.9961435971075943
718,4.3,by reference,5.0,5.0,5.0,0.9961435971075943
719,4.3,"The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. ",1.0,4.0,2.5,0.9734635304904325
720,4.4,a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time.  if you don't declare it static then the new values will not be stored and will be reset to their original value,5.0,5.0,5.0,0.9895633141817154
721,4.4,a static array can only be referenced not accessed. Also static arrays can be used without creating an object.,3.0,5.0,4.0,0.9850007776860811
722,4.4,An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.,5.0,5.0,5.0,0.9900927690157556
723,4.4,"A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.",3.0,5.0,4.0,0.9931483752148833
724,4.4,Arrays that are static remain the same size throughout the program execution.,3.0,5.0,4.0,0.9895276299652357
725,4.4,"a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",5.0,5.0,5.0,0.9883286684096724
726,4.4,An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.,4.0,5.0,4.5,0.9879444694484881
727,4.4,a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.,1.0,5.0,3.0,0.9878108166269176
728,4.4,"If an array is declared as static, it is not created each time the array is called.",5.0,5.0,5.0,0.9894613871025477
729,4.4,"An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.",5.0,5.0,5.0,0.9932866648528927
730,4.4,"All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  ",4.0,5.0,4.5,0.9925783484929425
731,4.4,"All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",4.0,5.0,4.5,0.9931660370900744
732,4.4,static cannot be changed,1.0,5.0,3.0,0.9720465056697507
733,4.4,"A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",3.0,5.0,4.0,0.9916616734782389
734,4.4,"A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).",1.0,5.0,3.0,0.9863590620698524
735,4.4,A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else.  This doesn't happen for automatic arrays.,5.0,5.0,5.0,0.9903605971654155
736,4.4,"Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. ",1.0,5.0,3.0,0.9937421233522802
737,4.4,"static arrays keep the values after the end of a function, while non static reinitialize every time.",5.0,5.0,5.0,0.9901967743456509
738,4.4,"Static arrays are created and initialized only once, and the values aren't destroyed  when the function terminates in the program. Automatic arrays reset everytime the function is called.",5.0,5.0,5.0,0.9922063450669147
739,4.4,"its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",5.0,5.0,5.0,0.9938985994594057
740,4.4,"When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.",5.0,5.0,5.0,0.9935075944857614
741,4.4,the static array exists for the duration of the program ,4.0,5.0,4.5,0.9871953887177862
742,4.4,an array declared as static can only be declared once,2.0,5.0,3.5,0.980515929594037
743,4.4,"A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates",5.0,5.0,5.0,0.9918436048630691
744,4.4,not answered,0.0,0.0,0.0,0.9741811535338363
745,4.4,Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized ,5.0,5.0,5.0,0.9905486502012656
746,4.4,A static array cannot be changed in the program.,1.0,5.0,3.0,0.9850409734999335
747,4.4,static arrays are available throughout the program,5.0,5.0,5.0,0.9856316165571618
748,4.4,"a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.",5.0,5.0,5.0,0.9942902106137108
749,4.4,"if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   ",1.0,5.0,3.0,0.9901947894266516
750,4.5,"at least 2, depending on how many arrays are being used.",1.0,4.0,2.5,0.9896647217157922
751,4.5,all of them.,2.0,5.0,3.5,0.9820314551424364
752,4.5,"When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",5.0,5.0,5.0,0.9925833126697217
753,4.5,It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.,2.0,5.0,3.5,0.9900166968470127
754,4.5,The first dimension is not required however the subsequent dimension(s) are needed for the compiler.,5.0,5.0,5.0,0.9949210708448116
755,4.5,all but the first,5.0,5.0,5.0,0.9754046984201553
756,4.5,All of the dimensions must be specified.,2.0,5.0,3.5,0.9924686507950459
757,4.5,just the first one at least.,1.0,3.0,2.0,0.9813586880865407
758,4.5,"Two paramaters, the array and how many columns.  array(a[],[3])",4.0,4.0,4.0,0.9921055111680837
759,4.5,"The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: ""MultiArray[][4][6], 2""",4.0,5.0,4.5,0.9840921311816606
760,4.5,Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension  ,4.0,5.0,4.5,0.9924252842509421
761,4.5,Every dimension after the first.,5.0,5.0,5.0,0.981587980189065
762,4.5,both,2.0,3.0,2.5,0.9661861420224753
763,4.5,"the size of the first dimension does not need to be specified, but all other dimensions do.",5.0,5.0,5.0,0.9884337153741504
764,4.5,"when passing (in main) a multidimensional array to a function, no dimensions need be specified",1.0,3.0,2.0,0.9900662368489264
765,4.5,"All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension.  The size of the first dimension does not need to be specified.",5.0,5.0,5.0,0.990720466069887
766,4.5,as many as there are dimensions. Most commonly just rows and columns,2.0,5.0,3.5,0.9911204603142204
767,4.5,"at least 2, but it should always equal the number of dimensions that the argument is expecting... like...  blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.",1.0,5.0,3.0,0.973235481388821
768,4.5,"None, just pass the array name.",1.0,3.0,2.0,0.9932737972733778
769,4.5,all subsequent dimensions after the first dimension.  first is not needed to be specified.,5.0,5.0,5.0,0.9884821500015375
770,4.5,"all dimensions, excluding the first one.",5.0,5.0,5.0,0.9918975445429113
771,4.5,all dimensions but the first ,5.0,5.0,5.0,0.9878788283605915
772,4.5,the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][]),1.0,5.0,3.0,0.986290170632044
773,4.5,one less than the number of dimensions the array contains,4.0,5.0,4.5,0.9821038104100965
774,4.5,not answered,0.0,0.0,0.0,0.9741811535338363
775,4.5,one,1.0,3.0,2.0,0.9622906414331676
776,4.5,All subsequent dimensions after the first one.,5.0,5.0,5.0,0.9875458192168564
777,4.5,two or more,1.0,4.0,2.5,0.9726026909874788
778,4.5,1 less than the total number of dimensions,4.0,5.0,4.5,0.9809328651635965
779,4.5,"Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. ",2.0,5.0,3.5,0.9930486551936352
840,5.1,"Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.",1.0,5.0,3.0,0.9949566298060859
841,5.1,"Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.",5.0,5.0,5.0,0.9938234961221453
842,5.1,The sorted array or list is built one entry at a time.,3.0,4.0,3.5,0.9894849293035277
843,5.1,It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.,5.0,5.0,5.0,0.9900991626347394
844,5.1,Compare two numbers at a time and swap until the entire list is sorted.,1.0,3.0,2.0,0.9882790080039467
845,5.1,"Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.",5.0,5.0,5.0,0.9896345753931282
846,5.1,insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.,5.0,4.0,4.5,0.9887355065182034
847,5.1,Looking at the 2nd element move forward and place the element in the correct spot.,4.0,5.0,4.5,0.9922574746830441
848,5.1,"Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements. ",5.0,5.0,5.0,0.9948755080419225
849,5.1,To sort the elements in an array by removing an element from the input data and inserting it at the correct position. ,5.0,5.0,5.0,0.9933461665093621
850,5.1,"Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",5.0,5.0,5.0,0.9948339575856672
851,5.1,Take a number and choose a pivot point and insert the number in the correct position from the pivot point.,2.0,4.0,3.0,0.990109005064728
852,5.1,have a marker and sort everything to the left of the value for every new value when moving to the right.,3.0,3.0,3.0,0.9902298759905843
853,5.1,The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.,4.0,5.0,4.5,0.991821451131648
854,5.1,Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.,5.0,4.0,4.5,0.9907814663891329
855,5.1,"it goes through the list only once, picking each integer and putting it in its desired position, then continuing. ",4.0,4.0,4.0,0.9935492083261487
856,5.1,Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.,3.0,4.0,3.5,0.9919292832927172
857,5.1,Insert the item into its proper position by shifting larger sorted array values to the right. ,1.0,5.0,3.0,0.9903537898665499
858,5.1,a comparison sort in which the sorted array is built one entry at a time,4.0,4.0,4.0,0.991299477692687
859,5.1,"Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.",5.0,4.0,4.5,0.988797515256532
860,5.1,"Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.",5.0,5.0,5.0,0.9947002738059024
861,5.1,the insertion sort creates a new array and inserts each item in its place with respect to the new array.,4.0,4.0,4.0,0.9907180661903995
862,5.1,"Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.",5.0,5.0,5.0,0.9953205901201763
863,5.1,"it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... ",5.0,5.0,5.0,0.9895935890220511
864,5.1,"Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.",3.0,5.0,4.0,0.9893768739716762
865,5.1,"one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items",5.0,4.0,4.5,0.9897157188132097
866,5.1,you take each element and insert it in the correct position with respect to all the elements before it,5.0,5.0,5.0,0.9867212866309487
867,5.1,"Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.",4.0,4.0,4.0,0.992369155006214
868,5.2,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,5.0,5.0,5.0,0.9896039087830228
869,5.2,"Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.",5.0,4.0,4.5,0.9926407705389155
870,5.2,Finds the minimum value and swap it with the value in the first position.,5.0,5.0,5.0,0.9921999369894839
871,5.2,It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.,5.0,5.0,5.0,0.9922879213501158
872,5.2,"Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.",4.0,5.0,4.5,0.9960825107505666
873,5.2,"Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.",5.0,4.0,4.5,0.989007880700682
874,5.2,find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until  the array is sorted.,5.0,5.0,5.0,0.989449697090504
875,5.2,Find the smallest and put it in the current position till you get to the end.,5.0,5.0,5.0,0.9915256628677973
876,5.2,"Find the lowest unsorted value in the array and place it at the current position (starting at the first element in the array) and advance the ""current"" position by one. ",5.0,5.0,5.0,0.9957192882990663
877,5.2,To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.,2.0,5.0,3.5,0.9910882899971512
878,5.2,"Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.",5.0,4.0,4.5,0.9944001494209513
879,5.2,"Select the minimum number from the array and put it in the current position, then move on",5.0,5.0,5.0,0.9949337606489734
880,5.2,Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.,5.0,5.0,5.0,0.9931263563481821
881,5.2,The main idea behind selection sort is to take the least variable from the right and put it directly to the left.,5.0,4.0,4.5,0.9910163442533935
882,5.2,"Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.",5.0,5.0,5.0,0.9872982780685498
883,5.2,It runs through and finds the lowest (or highest) value and puts it in its desired position.,5.0,4.0,4.5,0.9928256413358987
884,5.2,"Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.",5.0,5.0,5.0,0.9951838178304391
885,5.2,Search for the largest item in an array and swap it with the last unsorted item. ,5.0,4.0,4.5,0.991253682591449
886,5.2,finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.,5.0,5.0,5.0,0.9918955632804767
887,5.2,Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted,5.0,4.0,4.5,0.9943559155018132
888,5.2,Select the smallest number in the list and move it to the front of the list and then advance to the next number.,5.0,5.0,5.0,0.9921424116892434
889,5.2,the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.,5.0,4.0,4.5,0.9924753406250547
890,5.2,"Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted",4.0,5.0,4.5,0.9956504093982772
891,5.2,"selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position",5.0,5.0,5.0,0.9941997204017021
892,5.2,"To put the biggest element at the end of the list and place the next highest element behind it, and so on.",3.0,4.0,3.5,0.994401732734689
893,5.2,"the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array",5.0,4.0,4.5,0.9928816046912785
894,5.2,"you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.",5.0,5.0,5.0,0.9825375598444609
895,5.2,Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position. ,5.0,5.0,5.0,0.9920221158804697
896,5.3,"The run time for this sorting program is n^2.  Best case is the list is already sorted, worst case is the list is sorted but in reverse. ",4.0,3.0,3.5,0.9848043472027277
897,5.3,"Insertion sort is O(n) and performs n-1 operations in the best-case scenario, which is when the list or array is already sorted.",5.0,4.0,4.5,0.991836819534218
898,5.3,"The number of operations for insertions sort, under best-case, is  n(n-1)/2. The best case for insertion sort is on a sorted list where it runs is O(n). ",3.0,3.0,3.0,0.9859436602984493
899,5.3,"Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.",4.0,4.0,4.0,0.9913042087289956
900,5.3,Best case-1 Worst Case-N,0.0,4.0,2.0,0.9829435965008865
901,5.3,It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.,5.0,5.0,5.0,0.9887791225478789
902,5.3,O(n),3.0,4.0,3.5,0.9817251540727457
903,5.3,Best case is all elements sorted. n-1.,5.0,3.0,4.0,0.9856319085918489
904,5.3,"The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate ""x"" times (""x"" being the number of elements in the array) and the while loop to never have to iterate, resulting in the insertion sort to require ""x"" operations. ",5.0,5.0,5.0,0.9878813818498065
905,5.3,1 operation. the best case scenario s where it is already sorted and does one comparision.,3.0,3.0,3.0,0.9790153789426916
906,5.3,"n operations, where n is the number of items.",3.0,5.0,4.0,0.9911168244232169
907,5.3,n-1,3.0,4.0,3.5,0.9584800895608536
908,5.3,"O(n), the list is already sorted.",5.0,4.0,4.5,0.9935046470332174
909,5.3,Insertion sort will take n-1 operations if the array is in reverse order.,4.0,4.0,4.0,0.9875222009114526
910,5.3,"In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. ",5.0,5.0,5.0,0.9849922411401838
911,5.3,1 where there is a list of two ints and only one must be moved.,2.0,3.0,2.5,0.9760582033228326
912,5.3,"Best case is N, while the worst case is N factorial.",2.0,4.0,3.0,0.9926156754023402
913,5.3,n-1 The best case is when the array is already sorted.,5.0,4.0,4.5,0.9804436018657643
914,5.3,worst case its = O(n) time best case its = O(n^2) time,2.0,4.0,3.0,0.9905701349973315
915,5.3,O(n),3.0,4.0,3.5,0.9817251540727457
916,5.3,N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.,5.0,5.0,5.0,0.9824421821478526
917,5.3,the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements,5.0,5.0,5.0,0.9816885878985018
918,5.3,"insertion sort will make zero operations (and length - 1 comparisons) in the best case scenario, that is, when the array its given is already in order.",3.0,4.0,3.5,0.9882552950296756
919,5.3,theta(n) the best case senario is that everything is already sorted,5.0,4.0,4.5,0.9956120968129423
920,5.3,n operations  The best case scenario is when all the numbers are in increasing order.,5.0,5.0,5.0,0.9828273103311101
921,5.3,"it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved  having two items allows the algorithm to sort the items into the correct order",2.0,3.0,2.5,0.982516936928016
922,5.3,the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted),5.0,3.0,4.0,0.976419389095001
923,5.3,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1 ,2.0,3.0,2.5,0.9873006273113052
924,5.4,"The base case for a recursive merge sort is one number.  One number by itself is a sorted list, regardless of what number it is.",5.0,5.0,5.0,0.9930582277620305
925,5.4,The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.,5.0,5.0,5.0,0.9948882858401488
926,5.4,The base case for a recursive implementation of merge sort is one.,5.0,5.0,5.0,0.9936452221357078
927,5.4,The best case is the same as the worst case O(n log n) for a recursive merge sort.,1.0,3.0,2.0,0.9952219038512079
928,5.4,there is one object in the split array to sort.,5.0,5.0,5.0,0.9940885934356164
929,5.4,The base case is when the length of the current array is 1.,5.0,5.0,5.0,0.9946694563921724
930,5.4,O(nlog(n)),1.0,4.0,2.5,0.9819704347239849
931,5.4,Best case is one element.  One element is sorted.,5.0,5.0,5.0,0.9932950780653942
932,5.4,If the array being sorted has 0 or 1 elements,5.0,4.0,4.5,0.9964343774238177
933,5.4,"T(n) = 0, if n&lt;2.",4.0,4.0,4.0,0.982902594484667
934,5.4,"A list size of 1, where it is already sorted.",5.0,5.0,5.0,0.9953347858580842
935,5.4,Single element in the array,5.0,5.0,5.0,0.9924572035805371
936,5.4,O(nlog(n)),1.0,3.0,2.0,0.9819704347239849
937,5.4,n * log( n ),1.0,3.0,2.0,0.9776447407712643
938,5.4,A list or array of only 1 element.,5.0,5.0,5.0,0.9932504100143188
939,5.4,where you only must merge sort once,3.0,4.0,3.5,0.9887073575461671
940,5.4,A single Element on the Array.,5.0,5.0,5.0,0.9937272727044824
941,5.4,There is only one element in the subarray.,5.0,5.0,5.0,0.9943666425162113
942,5.4,"if the array length is less than or equal to 1, then that array is returned to the other array and merged together",5.0,4.0,4.5,0.9952070883822182
943,5.4,"if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } ",2.0,2.0,2.0,0.9607384942188885
944,5.4,The sequence of numbers has zero or one elements.,5.0,5.0,5.0,0.9946709336644807
945,5.4,one element in an array,5.0,5.0,5.0,0.9909262671208015
946,5.4,array of length 1,5.0,5.0,5.0,0.9902667260422698
947,5.4,the array has one element,5.0,5.0,5.0,0.9905135254776901
948,5.4,"When there is only one element in the array, or when the starting element in the array is the same as the ending element.",4.0,5.0,4.5,0.9941522031581866
949,5.4,"when each half or the original array has nothing else to sort, and puts the halfs back together",2.0,3.0,2.5,0.9941664315566238
950,5.4,the size of the list being sent is &lt;= 1,5.0,4.0,4.5,0.9954298357475793
951,5.4,O(n log n),1.0,3.0,2.0,0.9826581248168922
952,6.1,Its a location in memory that contains the memory address of another location in memory that contains information.,5.0,5.0,5.0,0.997928549566924
953,6.1,A pointer is a variable that contains a memory address as its value.,5.0,5.0,5.0,0.9969860482584558
954,6.1,A pointer is a variable which stores the address of another variable.,5.0,5.0,5.0,0.9975689964578753
955,6.1,Pointers are variables that contain as their values memory addresses of other variables.,5.0,5.0,5.0,0.9971936471251455
956,6.1,A data type whose value refers to another value stored elsewhere in the computer memory using its address.,4.0,5.0,4.5,0.9919631660424305
957,6.1,a pointer holds a memory location,5.0,4.0,4.5,0.9912566402682585
958,6.1,a name that represents actual location or value of a data type. int *bPtr points to an integer value.,5.0,4.0,4.5,0.995098967375635
959,6.1,A variable that stores the address of another variable,5.0,5.0,5.0,0.9995736806339494
960,6.1,a pointer is a programming language data type whose value refers directly to (or points to) another value stored elsewhere in the computer memory using its address,5.0,5.0,5.0,0.98968195043588
961,6.1,A data type whose value refers to another value stored somewhere else in the computer memory using its address.,5.0,5.0,5.0,0.9923311897239253
962,6.1,"It is like a variable however instead of holding data, it holds a location in memory.",4.0,5.0,4.5,0.9943769556681864
963,6.1,A pointer is a reference to a location in memory,5.0,5.0,5.0,0.9926715481387857
964,6.1,A pointer is a reference to the memory location of an object.,4.0,5.0,4.5,0.9949445953221646
965,6.1,A pointer is a variable that contains the memory address of a variable that has a value.,5.0,5.0,5.0,0.997894400399698
966,6.1,"It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.",2.0,5.0,3.5,0.9930350206677865
967,6.1,Contains a variable's memory address as a value.,5.0,5.0,5.0,0.9928074812747093
968,6.1,variable that points to the memory address of another variable and it is type specific.,5.0,5.0,5.0,0.9967519047545609
969,6.1,An element that references a memory cell,5.0,5.0,5.0,0.9971783569731768
970,6.1,Is a reference call to the place in memory where the object is stored.,4.0,4.0,4.0,0.9948283037230948
971,6.1,a variable that contains the address of another variable,5.0,5.0,5.0,0.9980862241578135
972,6.1,"A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.",5.0,5.0,5.0,0.9941106647673144
973,6.1,A pointer is a variable that contains a memory address of anther variable,5.0,5.0,5.0,0.997416506489357
974,6.1,A variable that contains the memory address of another variable that contains a specific value.,5.0,5.0,5.0,0.999253809271236
975,6.1,a variable with a memory address as the value,5.0,4.0,4.5,0.9922696492994802
976,6.1,it is a type that points to something else. It is the memory address of something else,5.0,4.0,4.5,0.9929965573403307
977,6.1,A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory. ,4.0,5.0,4.5,0.9946714746485148
978,6.2,This operator returns the memory address of its operand.,5.0,5.0,5.0,0.9982486154350623
979,6.2,The address operator returns the memory address of its operand.,5.0,5.0,5.0,0.9987367494999037
980,6.2,Returns memory address of its operand.,5.0,5.0,5.0,1.0
981,6.2,The address (&) operator returns the memory address of its operand.,5.0,5.0,5.0,0.9897051542402244
982,6.2,Returns the memory address of its operand.,5.0,5.0,5.0,0.9954879702354352
983,6.2,returns the place in memory of that element,5.0,3.0,4.0,0.9938795723191932
984,6.2,The address of the where the data is stored: &b will return the address of b.,4.0,5.0,4.5,0.9919084702324026
985,6.2,The & operator returns the address of a variable,5.0,5.0,5.0,0.9958807173603944
986,6.2,"the ampersand (&) means ""pass by reference"". When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.",3.0,3.0,3.0,0.9798658337136814
987,6.2,& returns the memory address of its operand.,5.0,5.0,5.0,0.9920817404682009
988,6.2,the address of the variable in memory,5.0,5.0,5.0,0.9906844273598107
989,6.2,Returns the address location in memory of the item.,5.0,4.0,4.5,0.9942513519575696
990,6.2,The address operator returns the memory address of its operand.,5.0,5.0,5.0,0.9987367494999037
991,6.2,The & operator returns the memory address of the variable it precedes.,5.0,5.0,5.0,0.9955560541029971
992,6.2,"The memory address of operand, 0x000000 or something along those lines. ",4.0,5.0,4.5,0.99371834506814
993,6.2,The object's memory address.,4.0,5.0,4.5,0.9982868245839918
994,6.2,the reference to a variable,5.0,4.0,4.5,0.9893676485783263
995,6.2,returns the memory address of its operand,5.0,5.0,5.0,0.9952328028836251
996,6.2,memory address of its operand,5.0,5.0,5.0,0.999384689328653
997,6.2,returns the address number of the specified variable,5.0,4.0,4.5,0.9945239079391492
998,6.2,"It returns the memory address of it's operand. That is, if applied to a normal variable, it gives the variable's memory address, just as a pointer variable might.",4.0,5.0,4.5,0.9884070950671433
999,6.2,The & is a unary operator that returns the memory address of its operand,5.0,5.0,5.0,0.9933696976352047
1000,6.2,the address of the variable it is attached to,5.0,3.0,4.0,0.9917160752409385
1001,6.2,the memory address of its operand,5.0,5.0,5.0,0.9969598552504156
1002,6.2,returns the address of what it is put in front of,5.0,4.0,4.5,0.9900231068847071
1003,6.2,returns a pointer,4.0,3.0,3.5,0.9874953542639356
1004,6.3,returns a synonym for the object to which its pointer operand points.,5.0,5.0,5.0,0.9879664295378852
1005,6.3,The star operator returns a synonym for the object to which its pointer operand points.,5.0,5.0,5.0,0.9887279651503993
1006,6.3,Returns synonym for the object its operand points to.,5.0,5.0,5.0,0.9904702328393611
1007,6.3,"It returns a synonym, alias or nickname of the name of the object that its operand points to in memory (dereferencing the pointer).",5.0,5.0,5.0,0.9972173540341497
1008,6.3,Returns an alias/nickname for the object to which the pointer operand points.,5.0,5.0,5.0,0.9866568689626672
1009,6.3,the * operator returns the value in the memory address the element points to.,4.0,4.0,4.0,0.9848931756044049
1010,6.3,The * returns the value,4.0,4.0,4.0,0.9936611276283489
1011,6.3,The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to),5.0,5.0,5.0,0.9978665828864102
1012,6.3,The dereferencing operator returns the dereferenced object.,4.0,5.0,4.5,0.9901128078160008
1013,6.3,* returns the synonym for the object its operand points to.,5.0,5.0,5.0,0.9902711275189314
1014,6.3,it returns the information in the address the pointer points to.,4.0,4.0,4.0,0.9893923460592856
1015,6.3,the star operator returns the value at the memory address the pointer is pointing at.,5.0,4.0,4.5,0.9881493028526362
1016,6.3,The star operator returns the object at that memory location.,4.0,4.0,4.0,0.9876002236327192
1017,6.3,The * operator returns the value of the object's memory address it precedes.,4.0,3.0,3.5,0.998423491077985
1018,6.3,The value of the object that the operand points to,4.0,5.0,4.5,0.9914982121736385
1019,6.3,The value stored in the object being pointed to.,4.0,4.0,4.0,0.9904220065921578
1020,6.3,the value of the variable the pointer points to.,4.0,4.0,4.0,0.9857682371952469
1021,6.3,returns synonym for the object its operand points to,5.0,5.0,5.0,0.990144342369893
1022,6.3,synonym for the object its operand points to,5.0,5.0,5.0,0.9870429386999816
1023,6.3,Returns synonym for the object its operand points to,5.0,5.0,5.0,0.990144342369893
1024,6.3,"It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.",4.0,5.0,4.5,0.9947355040084077
1025,6.3,It is unary operator that returns the value of the variable located at the address,4.0,4.0,4.0,0.9902490618946149
1026,6.3,a reference to a = variable,1.0,3.0,2.0,0.9820492891832401
1027,6.3,a synonym for the object to which its pointer operand points,5.0,5.0,5.0,0.9883309343765906
1028,6.3,it returns the actual data at the address pointed to,4.0,3.0,3.5,0.9899316581466271
1029,6.3,will return zero or many characters placed before the operator ,1.0,3.0,2.0,0.9906712465731715
1030,6.4,The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.,2.0,4.0,3.0,0.9939967665549823
1031,6.4,An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.,5.0,4.0,4.5,0.9955982703729422
1032,6.4,Element b[ n ] can be accessed by  *( bPtr + n ).,5.0,3.0,4.0,0.9818802974289224
1033,6.4,Using either the name of the array as a pointer or using a separate pointer that points to the array.,3.0,3.0,3.0,0.9949473473938425
1034,6.4,An element b[3] can be referenced by using *( bPtr + 3) instead.,5.0,3.0,4.0,0.9875546674720275
1035,6.4,you get the memory location of the first element and the you add an offset to it to get other elements.,5.0,5.0,5.0,0.9906896597164525
1036,6.4,yes *(array +offset),5.0,3.0,4.0,0.9792487138888604
1037,6.4,"The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer ""a"" which stores the address of a[0].",3.0,4.0,3.5,0.9930420156487986
1038,6.4,Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation. ,5.0,4.0,4.5,0.9787694194102365
1039,6.4,*(array + element),5.0,3.0,4.0,0.9863483053764582
1040,6.4,*f[3],2.0,3.0,2.5,0.9831545791906976
1041,6.4,you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).,5.0,5.0,5.0,0.9961416764037895
1042,6.4,"The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.",2.0,5.0,3.5,0.9978259052356719
1043,6.4,With int x[10]; int *xPtr; xPtr = x; Address &x[1] is the same as xPtr + 1.,5.0,3.0,4.0,0.9724834973459973
1044,6.4,Takes the number of array elements and points to each at a time,1.0,3.0,2.0,0.9957659348055372
1045,6.4,The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3),5.0,3.0,4.0,0.9944914776844554
1046,6.4,by using the *(pointer + element-index),5.0,3.0,4.0,0.9920946314630683
1047,6.4,using the star operator.   array: b[n] can be accessed by *(bpointer +n),5.0,4.0,4.5,0.9926077635339372
1048,6.4,Element A[n] can be accessed by *(APtr + n),5.0,3.0,4.0,0.9853481502797133
1049,6.4,"by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)",2.0,4.0,3.0,0.996768881358266
1050,6.4,"First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e. ptrToArray = array;  nthEntity = *(ptrToArray + n);",5.0,5.0,5.0,0.993901794703735
1051,6.4,&[b3] is as bptr + 3. Array can be treated as pointer,4.0,3.0,3.5,0.9846110154783091
1052,6.4,a[i] = *(a+i),5.0,3.0,4.0,0.9836840528363185
1053,6.4,&b[3]  bPtr + 3,5.0,3.0,4.0,0.9827795290811425
1054,6.4,*(arrayName + index),5.0,3.0,4.0,0.9863483053764582
1055,6.4,multi-dimensional array,0.0,2.0,1.0,0.9839176724151117
1056,6.5,the number of bytes of an array during program compilation.,4.0,5.0,4.5,0.9949687891760328
1057,6.5,The sizeof operator returns the size of the operand.,5.0,3.0,4.0,0.9974101132515985
1058,6.5,Returns size of operand in bytes.,5.0,5.0,5.0,0.9995699186086756
1059,6.5,It returns the size of an array in bytes.,4.0,5.0,4.5,0.996389262092167
1060,6.5,Returns the size of the array in bytes during the program compilation.,4.0,5.0,4.5,0.9939890024682562
1061,6.5,it returns the size of the argument passed in,5.0,3.0,4.0,0.9944775596013504
1062,6.5,The byte size of the date stored ina variable.,4.0,5.0,4.5,0.9981071305567512
1063,6.5,sizeof returns the size of the operand in bytes,5.0,5.0,5.0,0.9960427828856966
1064,6.5,"The amount of memory required for a specific parameter such as ints, doubles.",4.0,3.0,3.5,0.9971617625676876
1065,6.5,sizeof returns the size of the operand in bytes.,5.0,5.0,5.0,0.9961002840991323
1066,6.5,the size of the information in bits.,1.0,4.0,2.5,0.9921187534594669
1067,6.5,the size of the string.,3.0,3.0,3.0,0.9905138570384485
1068,6.5,sizeof returns the size in bytes of the respective object.,4.0,5.0,4.5,0.9968122222973549
1069,6.5,The sizeof operator returns the total number of bytes of its operand.,5.0,5.0,5.0,0.9972126152099637
1070,6.5,"The size of an operand in bytes. Used with variable names, type names, and constant values",5.0,5.0,5.0,0.996691654842471
1071,6.5,the size in bytes needed to store the object in memory,4.0,5.0,4.5,0.995816200958996
1072,6.5,the size of the list object.,4.0,2.0,3.0,0.9893222432929467
1073,6.5,the sizeof operator returns the size in bytes of an array parameter,3.0,5.0,4.0,0.9969619898756118
1074,6.5,the size of operand in bytes,5.0,5.0,5.0,0.9948985726390457
1075,6.5,returns the size in bytes of the specified data,4.0,5.0,4.5,0.9949622256747451
1076,6.5,"It returns the size of an operand in memory, which is checked at compiler-time.",5.0,3.0,4.0,0.9946139269180343
1077,6.5,Return size of operand in bytes,5.0,5.0,5.0,0.9992216656194105
1078,6.5,the total number of bytes of an object.,4.0,5.0,4.5,0.9924251329879701
1079,6.5,total number of bytes in the array,4.0,5.0,4.5,0.9937298240049594
1080,6.5,it returns the size in bytes of a certain variable type,4.0,5.0,4.5,0.9943751327463527
1081,6.5,"it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type",3.0,5.0,4.0,0.9909781231933553
1082,6.6,They can be passed by value or by reference,2.0,3.0,2.5,0.9838761113846906
1083,6.6,"Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.",5.0,5.0,5.0,0.9969761400579217
1084,6.6,-Nonconstant pointer to nonconstant data       -Nonconstant pointer to constant data        -Constant pointer to nonconstant data         -Constant pointer to constant data,5.0,5.0,5.0,0.9912249726265762
1085,6.6,"Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.",5.0,5.0,5.0,0.996432874355571
1086,6.6,Pass-by-value or pass-by-reference.,2.0,3.0,2.5,0.97717406813974
1087,6.6,you can pass a pointer to a pointer or pass a reference to pointer.,2.0,3.0,2.5,0.9856263026327272
1088,6.6,by address &bPtr or directly bPtr.,2.0,3.0,2.5,0.9825293495066876
1089,6.6,"Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. ",5.0,5.0,5.0,0.9969761400579217
1090,6.6,By argument and reference.,1.0,3.0,2.0,0.985694177950603
1091,6.6,"Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.",5.0,5.0,5.0,0.9968195866914119
1092,6.6,pass by value and pass by reference with reference or pointer arguments.,2.0,3.0,2.5,0.9855950487965736
1093,6.6,you can pass them with the pointer (*) or the memory address (&),2.0,3.0,2.5,0.9795012351591301
1094,6.6,nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const,5.0,5.0,5.0,0.9874685259242366
1095,6.6,Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data,5.0,5.0,5.0,0.9912249726265762
1096,6.6,"Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.",5.0,5.0,5.0,0.9969761400579217
1097,6.6,Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *),2.0,3.0,2.5,0.9893873400236802
1098,6.6,you can pass the reference or the dereference in a function,2.0,2.0,2.0,0.9828935623757875
1099,6.6,1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.,5.0,5.0,5.0,0.9879758132359164
1100,6.6,"constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data",5.0,5.0,5.0,0.9971019494182183
1101,6.6,Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,5.0,5.0,5.0,0.9912249726265762
1102,6.6,"Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.",2.0,3.0,2.5,0.9914211526232666
1103,6.6,There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.,5.0,5.0,5.0,0.9900487421465481
1104,6.6,nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,5.0,5.0,5.0,0.9912249726265762
1105,6.6,"pass by value, pass by reference with reference arguments, pass by reference with pointer arguments",2.0,3.0,2.5,0.9888100994410481
1106,6.6,"you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither",5.0,3.0,4.0,0.9884133148185751
1107,6.6,"there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function",2.0,3.0,2.5,0.9915219354184096
1108,6.7,A pointer that points to the memory address of the beginning part of a functions.  pretty much the pointer points to the function so it can be called to execute.,5.0,5.0,5.0,0.9961206698597588
1109,6.7,A function pointer is a pointer that contains the address of the  function in memory.,5.0,5.0,5.0,0.9971168719844598
1110,6.7,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5.0,5.0,5.0,0.9900281444508082
1111,6.7,"A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.",5.0,5.0,5.0,0.994783310616963
1112,6.7,It contains the address of the function in memory.,5.0,5.0,5.0,0.9983364598067319
1113,6.7,when it is dereferenced a function pointer calls its function with zero or more arguments.,4.0,3.0,3.5,0.9936240389904736
1114,6.7,a pointer to a function,5.0,2.0,3.5,0.9831205905362762
1115,6.7,"A pointer to a function itself, contains the address of the function and can be used to call that function",5.0,5.0,5.0,0.9911889486272135
1116,6.7,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5.0,5.0,5.0,0.9900281444508082
1117,6.7,A pointer to a function that contains the addresses of the function.,5.0,5.0,5.0,0.9965269151375317
1118,6.7,a pointer that contains the address of a function,5.0,5.0,5.0,0.9958166442742428
1119,6.7,a function pointer is a pointer to a function. It can be used in substitution for calling a function.,5.0,5.0,5.0,0.9931891594950636
1120,6.7,Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.,5.0,5.0,5.0,0.9965251817089286
1121,6.7,"They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.",5.0,5.0,5.0,0.9902385453613234
1122,6.7,Pointer variables that point to function addresses.,5.0,5.0,5.0,0.9958376168335178
1123,6.7,Contains the address of the function in memory.,5.0,5.0,5.0,0.9973829208647197
1124,6.7,"a pointer that points to a function itself, which allows passing a function as a parameter to another function.",5.0,3.0,4.0,0.9914180034458965
1125,6.7,pointers that contain the addresses of functions.,5.0,5.0,5.0,0.9929939230536973
1126,6.7,is a pointer that contains the address of a function,5.0,5.0,5.0,0.9954829641710198
1127,6.7,a pointer that contains the address of the function definition,4.0,5.0,4.5,0.9970053809825052
1128,6.7,"A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.",5.0,5.0,5.0,0.9929284728771698
1129,6.7,Function pointer is a pointer to a function. function pointer contains address of functions,5.0,5.0,5.0,0.9949260317040823
1130,6.7,a pointer that contains the address of a function in memory.,5.0,5.0,5.0,0.9966020926759117
1131,6.7,it contains the address of the function in memory,5.0,5.0,5.0,0.9964950831148033
1132,6.7,it is a pointer that points to the address of a function. ,5.0,5.0,5.0,0.9947525653503714
1133,6.7,"When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.",4.0,4.0,4.0,0.9855472529420974
1134,7.1,"Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes. ",4.0,5.0,4.5,0.9883009674066393
1135,7.1,A linked list is a list in which each item in the list points to the next item in the list.,4.0,5.0,4.5,0.9909842352307977
1136,7.1,"A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items. ",4.0,5.0,4.5,0.9924707037674423
1137,7.1,"A list of elements, or nodes, that are linked to one another such that each element points to the next element.",4.0,5.0,4.5,0.9874940927670973
1138,7.1,"A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.",4.0,5.0,4.5,0.9869550122255502
1139,7.1,a list of nodes where each node contains a data member and also a pointer to the next node.,4.0,5.0,4.5,0.9965310429256812
1140,7.1,A list of items linked together.  Each item is linked to its successor.,4.0,5.0,4.5,0.9964572142258774
1141,7.1,A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.,4.0,5.0,4.5,0.9920619264286461
1142,7.1,"one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes. ",4.0,5.0,4.5,0.987767584082003
1143,7.1,"A data structure in a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.",4.0,5.0,4.5,0.9870245903676148
1144,7.1,Information in memory linked to the next piece of information and can only be linked forwards and not backwards.,2.0,5.0,3.5,0.9969804882114669
1145,7.1,"A linked list is a data structure that is not necessarily in the same contiguous memory space (such as arrays). It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.",5.0,5.0,5.0,0.9850802762931188
1146,7.1,A linked list is a data structure containing one or more data elements with a pointer to the next node.,4.0,5.0,4.5,0.9946189365241308
1147,7.1,"A series of ""Nodes"" structures with a value and a pointer that point to a similar ""Node"". Not quite an array, but still can carry a list of values. ",4.0,5.0,4.5,0.9953739710943336
1148,7.1,A data type that contains a pointer to at least the next  element in a list.,4.0,5.0,4.5,0.9950480590315558
1149,7.1,Each component contains a Node - a data item and a pointer to the next item in the list,4.0,5.0,4.5,0.9896933663698777
1150,7.1,"A linked list is a chain of structs or records called nodes.  Each node has at least two members, one of which points to the next item or node in the list.",4.0,5.0,4.5,0.9900961819105305
1151,7.1,"An array based list that uses an implicit ordering scheme, often using pointers.",1.0,4.0,2.5,0.9947015657410302
1152,7.1,a series of structures containing data items and a pointer that links the structure to the next structure.,4.0,5.0,4.5,0.997104648560287
1153,7.1,"A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)",4.0,5.0,4.5,0.9879535426185211
1154,7.1,A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,4.0,4.0,4.0,0.9927945418651936
1155,7.1,its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element,4.0,5.0,4.5,0.9945777467934425
1156,7.1,linear collection of self-referential nodes connected by pointers.,4.0,4.0,4.0,0.9979915677594926
1157,7.1,the items of a data structure are linked to each other using pointers,4.0,5.0,4.5,0.9959522593589024
1158,7.1,A list of objects where each object contains a link to the next item in the list,4.0,5.0,4.5,0.9964346228669156
1159,7.1,"A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.  ",4.0,5.0,4.5,0.9838115735965008
1160,7.2,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be. ,5.0,5.0,5.0,0.9941387529675206
1161,7.2,"Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.",5.0,5.0,5.0,0.9903722174973362
1162,7.2,"Array size is fixed,but Linked is not fixed.",5.0,5.0,5.0,0.9907032484411051
1163,7.2,You can insert into and delete items from a pointer-based linked list without shifting data.,5.0,4.0,4.5,0.9970144405011342
1164,7.2,Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.,5.0,5.0,5.0,0.9959867861471259
1165,7.2,"The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time",3.0,5.0,4.0,0.9756587600331588
1166,7.2,You can expand when you need it.  You do not have to predetermine the size.,5.0,5.0,5.0,0.9902269356472975
1167,7.2,Linked lists are able to grow and shrink in size as needed,5.0,5.0,5.0,0.9952165074519179
1168,7.2,Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions ,5.0,5.0,5.0,0.9891670256540506
1169,7.2,"A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.",5.0,5.0,5.0,0.9827104637371441
1170,7.2,There is no limit as to how many you create where an array can only hold a given amount of information.,3.0,3.0,3.0,0.9915932468099682
1171,7.2,Linked lists have constant time insertion and deletion,4.0,3.0,3.5,0.99588897899196
1172,7.2,"Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.",5.0,5.0,5.0,0.9888254292938016
1173,7.2,Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.,5.0,5.0,5.0,0.9970172903747679
1174,7.2,"Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.",5.0,5.0,5.0,0.9870931298621216
1175,7.2,"They grow as needed, while arrays are of fixed size.",5.0,5.0,5.0,0.9905930973615096
1176,7.2,Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on 'i',5.0,5.0,5.0,0.9886794887674436
1177,7.2,Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.,5.0,5.0,5.0,0.9949472364763939
1178,7.2,more memory can be allocated on the fly for more items,4.0,5.0,4.5,0.9948912947361301
1179,7.2,"A linked list may be increased in size as needed, while an array's size is set when it is created",5.0,5.0,5.0,0.9885088318933423
1180,7.2,"Array has a fixed size, but linked list is able to grow in size as needed",5.0,5.0,5.0,0.9888519837300745
1181,7.2,its resizeable,5.0,5.0,5.0,0.9948836501334494
1182,7.2,Linked lists do not have a set size and can grow or shrink as needed.,5.0,5.0,5.0,0.9951525140524455
1183,7.2,linked lists are abe to grow as needed to a new size ,5.0,5.0,5.0,0.991444701878536
1184,7.2,"The size is not fixed, easier sorting because of no shifting, easier to insert items into the list",5.0,5.0,5.0,0.9870804384597727
1185,7.2,The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.,5.0,5.0,5.0,0.9932386422871499
1186,7.3,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node. ,5.0,5.0,5.0,0.9937954812803665
1187,7.3,"Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.",4.0,5.0,4.5,0.9878168470080946
1188,7.3,"Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.",5.0,5.0,5.0,0.9949535678908075
1189,7.3,Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.,5.0,5.0,5.0,0.9758840660175748
1190,7.3,"An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.",5.0,5.0,5.0,0.9898839429332543
1191,7.3,"On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5.0,5.0,5.0,0.9830734867955958
1192,7.3,You have to keep up with the head of the list.,1.0,3.0,2.0,0.9852583707976769
1193,7.3,Arrays are easier to implement and require less memory,3.0,4.0,3.5,0.9919209511518721
1194,7.3,Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.,2.0,3.0,2.5,0.9890541180416441
1195,7.3,You don't have to iterate through the entire list to access elements.,5.0,4.0,4.5,0.9919526587920087
1196,7.3,you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.,2.0,4.0,3.0,0.9857617662908524
1197,7.3,Take up less memory and are contiguously stored,4.0,4.0,4.0,0.988675447374999
1198,7.3,"Arrays, being fixed, are less error prone.",1.0,3.0,2.0,0.9933026769003002
1199,7.3,"Arrays have a set list of values. Meaning you can pick a spot in the array such as a[7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list. ",5.0,5.0,5.0,0.987844212185822
1200,7.3,"direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )",5.0,4.0,4.5,0.9829745007114714
1201,7.3,Array items are accessed directly with equal access time,5.0,5.0,5.0,0.9939860464488262
1202,7.3,Array-bases implementations require less memory than a pointer-bases one. ,3.0,4.0,3.5,0.9889225932109931
1203,7.3,You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.,5.0,5.0,5.0,0.9913620216757941
1204,7.3,link lists only allow sequential access where arrays allow random access,5.0,4.0,4.5,0.9918168347054113
1205,7.3,"Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects",5.0,5.0,5.0,0.9962167153925534
1206,7.3,Array based implementation requires less memory than lined lists based implementation,3.0,4.0,3.5,0.9920149316582332
1207,7.3,Array-based implementations require less memory than a pointer-based ones ,3.0,4.0,3.5,0.9898570545084999
1208,7.3,"You can go up and down an array , but you can only go one direction while traversing a linked list.",1.0,5.0,3.0,0.9913782118183291
1209,7.3,"arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item",5.0,5.0,5.0,0.9850445817439668
1210,7.3,"In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.",5.0,5.0,5.0,0.9903367874875303
1211,7.3,"Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5.0,5.0,5.0,0.9772020067741493
1212,7.4,They are passed by reference because you want the function to change the pointer ,4.0,5.0,4.5,0.9941618200489925
1213,7.4,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.,5.0,5.0,5.0,0.9906986915638871
1214,7.4,- A function with access to a linked list's head pointer has access to the entire list.        - Pass the head ponter to a function as a reference argument.,5.0,5.0,5.0,0.9812676548061608
1215,7.4,By using a node.,2.0,3.0,2.5,0.9982053174885688
1216,7.4,Pass-by-reference,5.0,5.0,5.0,0.9806875159845175
1217,7.4,you send a pointer to an object of the LinkedList class,2.0,3.0,2.5,0.991603968723773
1218,7.4,Passed as a pointer to the head.,5.0,3.0,4.0,0.9904732297333136
1219,7.4,Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,5.0,4.0,4.5,0.9872266480810757
1220,7.4,You have to pass the head pointer to a function since it has access to the entire list.,5.0,3.0,4.0,0.9904192305479624
1221,7.4,You pass the head pointer to a function as a reference argument.,5.0,5.0,5.0,0.9937103463221997
1222,7.4,not answered,0.0,0.0,0.0,0.9741811535338363
1223,7.4,passes a pointer to a linked list object,2.0,3.0,2.5,0.9923211057445603
1224,7.4,"The linked list object contains the head, through which the other elements are accessible.",4.0,3.0,3.5,0.9863929440361429
1225,7.4,By the head of the list. It takes the head address and traverses from there on in. ,5.0,3.0,4.0,0.9861610092607556
1226,7.4,as a pointer node.,3.0,3.0,3.0,0.9939124872948303
1227,7.4,A method with access to a linked list's head pointer as access to the entire list,5.0,3.0,4.0,0.9878205383769105
1228,7.4,A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument,5.0,5.0,5.0,0.983996693365696
1229,7.4,the head pointer is passed to a function as a reference argument.,5.0,5.0,5.0,0.9915819213518284
1230,7.4,the pointer to the first element is passed to a function,5.0,3.0,4.0,0.9902535376194459
1231,7.4,"linked lists are passed by reference, specificly the Head pointer",5.0,5.0,5.0,0.99126171281239
1232,7.4,Pass the head pointer to a function as a reference argument,5.0,5.0,5.0,0.9921629851682495
1233,7.4,by refrenece,5.0,5.0,5.0,0.9872516307137572
1234,7.4,By passing the head pointer and going through the list as needed inside the function.,5.0,3.0,4.0,0.989807491665035
1235,7.4,linked lists are passed by using pointers ,3.0,3.0,3.0,0.9954750282083019
1236,7.4,the head object is passed to the function,4.0,3.0,3.5,0.9900387539467332
1237,7.4,"Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. ",0.0,3.0,1.5,0.9881329758829526
1238,7.5,They are passed by reference because you want the function to change the pointer ,0.0,1.0,0.5,0.9941618200489925
1239,7.5,"In a circular linked list, every node has a successor which means that the last node's successor is the head or first node.",5.0,5.0,5.0,0.9931041226605407
1240,7.5,A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required. ,5.0,4.0,4.5,0.9929587127297014
1241,7.5,"In a circular linked list, the last node points to the first node.",5.0,5.0,5.0,0.9953151626584191
1242,7.5,"On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.",5.0,5.0,5.0,0.9866314083212084
1243,7.5,the circular linked list's last node points to the begining of the list while a standard linked list points to NULL,5.0,5.0,5.0,0.9956616771419095
1244,7.5,The last item in the list points to the head,5.0,5.0,5.0,0.9988389588758307
1245,7.5,"In a circular linked list, the last node points back to the first node, there is no NULL",5.0,5.0,5.0,0.9922787694418167
1246,7.5,"Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.",2.0,3.0,2.5,0.9907635852201473
1247,7.5,A circular linked list has the last node point back to the head of the linked list.,5.0,5.0,5.0,0.9964532085627573
1248,7.5,Basic linked list points to a NULL at the end and circular points to the head at the end.,5.0,5.0,5.0,0.9970140521190104
1249,7.5,in a circular linked list the the last item points to the first item.,5.0,5.0,5.0,0.9965749568657573
1250,7.5,"The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.",5.0,5.0,5.0,0.9941688352385896
1251,7.5,a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning,5.0,5.0,5.0,0.9955330331177961
1252,7.5,"how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.",5.0,5.0,5.0,0.9885151375769301
1253,7.5,"No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.",5.0,5.0,5.0,0.99501830986539
1254,7.5,"The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.",5.0,5.0,5.0,0.9906469452025709
1255,7.5,No node in a circular linked list contains NULL.,3.0,4.0,3.5,0.9981991047949825
1256,7.5,in a circular linked list the last element points to the head of the list,5.0,5.0,5.0,0.997600573412661
1257,7.5,"In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list",5.0,5.0,5.0,0.9946090085129659
1258,7.5,"In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.",3.0,3.0,3.0,0.990659690713219
1259,7.5,"in a circular linked lists, the last element points to the first",5.0,5.0,5.0,0.9942722576462699
1260,7.5,"A circular linked list does not have a last element. Instead, it's last item points to the head of the list.",5.0,5.0,5.0,0.9946393910491471
1261,7.5,"in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer ",5.0,5.0,5.0,0.9850464414168106
1262,7.5,"in a circular linked list, the last object is linked back to the first object.",5.0,5.0,5.0,0.9932208266768859
1263,7.5,"In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  ",2.0,5.0,3.5,0.9866961068003121
1264,7.6,they can traverse in both directions,3.0,4.0,3.5,0.9809656895232756
1265,7.6,In a doubly linked list you can delete a node without having to traverse the list.,5.0,4.0,4.5,0.990893099914423
1266,7.6,A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.,5.0,4.0,4.5,0.9917975028437143
1267,7.6,A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor. ,3.0,4.0,3.5,0.9920663624060899
1268,7.6,"Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.",3.0,4.0,3.5,0.9948548589597437
1269,7.6,you can traverse the list from front to back and back to front,3.0,4.0,3.5,0.9859281611460377
1270,7.6,You can traverse the list in reverse.,3.0,4.0,3.5,0.9864028148823737
1271,7.6,Doubly linked lists can be traversed in both directions,3.0,4.0,3.5,0.9881318384896663
1272,7.6,"Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.",4.0,3.0,3.5,0.9888319069343581
1273,7.6,You can traverse forwards and backwards through nodes. ,3.0,4.0,3.5,0.988042425112295
1274,7.6,You can point both forwards and backwards,3.0,4.0,3.5,0.9856703344128843
1275,7.6,You can go backwards in the linked list and access previous data easier without having to keep track of the previous item,4.0,4.0,4.0,0.9924711827607398
1276,7.6,Doubly linked lists allow backward movement through the nodes.,3.0,4.0,3.5,0.9904975869782383
1277,7.6,"they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need. ",3.0,4.0,3.5,0.9909554749670584
1278,7.6, ability to backtrack through a list.,3.0,3.0,3.0,0.9832738146885358
1279,7.6,You can move forwards and backwards in the double-linked list. Basic only moves forwards.,3.0,4.0,3.5,0.9922012087468873
1280,7.6,The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.,4.0,5.0,4.5,0.9922580878008037
1281,7.6,each node points to both its predecessor and its successor.,4.0,3.0,3.5,0.9894802954317401
1282,7.6,a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back,3.0,5.0,4.0,0.9929531722904297
1283,7.6,"A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish",3.0,4.0,3.5,0.9917869237327752
1284,7.6,"Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction",4.0,4.0,4.0,0.9933373324363671
1285,7.6,"given a node in the list, one can navigate easily in either direction",4.0,4.0,4.0,0.992909926738575
1286,7.6,You can traverse the list both forward and backwards.,3.0,4.0,3.5,0.9898077520942359
1287,7.6,a doubly linked list allows you to back up from a node rather than having to go through the entire list again ,4.0,4.0,4.0,0.9918073808016052
1288,7.6,Gives faster times for some operations such as insertion and deletion,5.0,5.0,5.0,0.9903529050328772
1289,7.6,"The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).",0.0,4.0,2.0,0.9879513571237195
1290,7.7,they take up twice as much memory for each node,5.0,5.0,5.0,0.9862474658203435
1291,7.7,"In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.",4.0,3.0,3.5,0.9762889683025608
1292,7.7,"There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.",4.0,4.0,4.0,0.9809402730584477
1293,7.7,Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.,3.0,3.0,3.0,0.980721216738634
1294,7.7,"Need more memory to store ""previous"" pointers.",5.0,5.0,5.0,0.9918462342295348
1295,7.7,a node in a doubly linked list takes up more memory than a node in a singly linked list.,5.0,5.0,5.0,0.9830881769040323
1296,7.7,You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.,3.0,3.0,3.0,0.988233458118045
1297,7.7,"Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes",5.0,5.0,5.0,0.9705686620875036
1298,7.7,"Double-linked lists require more space per node, and their elementary operations are more expensive",5.0,5.0,5.0,0.9753912642313125
1299,7.7,More difficult to delete and create nodes.,3.0,3.0,3.0,0.9896847827972592
1300,7.7,They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.,5.0,5.0,5.0,0.989257185361781
1301,7.7,nodes take up more memory,5.0,5.0,5.0,0.9862499995732571
1302,7.7,"Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).",5.0,5.0,5.0,0.973709690600039
1303,7.7,its a little more confusing. The special cases at the end and beginning become more difficult to do. ,3.0,3.0,3.0,0.9900931583098569
1304,7.7,increased actions to add and remove elements to the linked list.,3.0,3.0,3.0,0.9896983479993646
1305,7.7,"Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.",3.0,3.0,3.0,0.9746496980562162
1306,7.7,The main disadvanate is that if hard to remove all items in the list.,1.0,3.0,2.0,0.9882079417084472
1307,7.7,"each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.",5.0,5.0,5.0,0.9778250711240789
1308,7.7,"in a doubly linked list there are twice as many pointers for each element , therefore more memory is used",5.0,5.0,5.0,0.9810547493475833
1309,7.7,The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list,3.0,4.0,3.5,0.9836657425600511
1310,7.7,"Double linked lists require more space per node, and their elementary operation are more expensive",5.0,5.0,5.0,0.9762991183190104
1311,7.7,"1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations",5.0,5.0,5.0,0.9764297915904256
1312,7.7,It takes up twice the storage needed.,5.0,5.0,5.0,0.9890628977019482
1313,7.7,"using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list",5.0,5.0,5.0,0.9794223037976312
1314,7.7,"increased memory requirements, slightly more complicated when modifying elements in the list",5.0,5.0,5.0,0.9787565047084795
1315,7.7,not answered,0.0,0.0,0.0,0.9741811535338363
1316,8.1,A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.,5.0,5.0,5.0,0.9950340273136514
1317,8.1,A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.,5.0,5.0,5.0,0.992475340652162
1318,8.1,Stores a set of elements in a particular order.,0.0,4.0,2.0,0.9818966310147182
1319,8.1,"An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first out (LIFO). Items enter and leave a stack at its top.",5.0,5.0,5.0,0.993597319803827
1320,8.1,A list in which only the top (or last item added) can be modified.,4.0,5.0,4.5,0.989886421193928
1321,8.1,a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.,5.0,5.0,5.0,0.9906913105922247
1322,8.1,A data structure that stores data using LIFO.,5.0,5.0,5.0,0.9911043014523475
1323,8.1,"A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.",5.0,5.0,5.0,0.9939354335598098
1324,8.1,Stores a set of elements in a particular order. Stack principle: LAST  IN  FIRST  OUT. It means: the last element inserted is the first one to be removed.,5.0,5.0,5.0,0.9914699714787252
1325,8.1,A stack is an ADT that stores a set of elements in a particular order.,1.0,4.0,2.5,0.9909999134656978
1326,8.1,"a data type that stores a set of elements in a certain order, last in, first out.",5.0,5.0,5.0,0.9913332092263362
1327,8.1,a data structure that moves elements in last in first out,5.0,5.0,5.0,0.9916589567956063
1328,8.1,Stores a set of elements in a last in first out order.,5.0,5.0,5.0,0.9846522180050664
1329,8.1,A list that can be added to or removed from only from the top.,5.0,5.0,5.0,0.9905254905494638
1330,8.1,"a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.",5.0,5.0,5.0,0.9927775824490024
1331,8.1,Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO). ,5.0,5.0,5.0,0.9910197245084942
1332,8.1,"an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.",5.0,5.0,5.0,0.9920601345810864
1333,8.1,An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.,5.0,5.0,5.0,0.9937856987448259
1334,8.1,An abstract data type that stores a set of elements in a particular order.,1.0,4.0,2.5,0.9902345410901369
1335,8.1,a collection of data to be executed in the order of last in first out,5.0,5.0,5.0,0.9885311055741246
1336,8.1,"A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a ""Last in First Out"" structure.",5.0,5.0,5.0,0.9941965515482879
1337,8.1,Stores a set of element in a particular order,0.0,4.0,2.0,0.9802941292032475
1338,8.1,is a list of element where the first one to be removed is the last one inserted,5.0,5.0,5.0,0.9859071704156911
1339,8.1,A data structure that puts elements in a list and only allows the user  access to the last element.,4.0,5.0,4.5,0.9939489530666384
1340,8.1,a finite ordered list with zero or more elements,0.0,4.0,2.0,0.9852365066900262
1341,8.1,"A storage container that holds objects in a certain order, which has a LIFO priority",5.0,5.0,5.0,0.9952722953655951
1342,8.1,"Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.",5.0,5.0,5.0,0.9876895023407962
1343,8.2,Push and pop are two main functions defined in a stack,5.0,5.0,5.0,0.9874813026340016
1344,8.2,Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.,5.0,5.0,5.0,0.9774795367090892
1345,8.2,Push and pop.,5.0,5.0,5.0,0.9920781302532681
1346,8.2,Pop function and Push function,5.0,5.0,5.0,0.9797573257418579
1347,8.2,push and pop.,5.0,5.0,5.0,0.9978576598619543
1348,8.2,push (insert an item) pop (remove an item),5.0,5.0,5.0,0.9768963244339127
1349,8.2,Adding a new item and removing the item,5.0,5.0,5.0,0.9860721643269064
1350,8.2,Push (insert) and pop (retrieve).,5.0,5.0,5.0,0.9666960292698835
1351,8.2,push and pop.,5.0,5.0,5.0,0.9978576598619543
1352,8.2,Push and Pop.,5.0,5.0,5.0,0.9865531141845125
1353,8.2,pop and push,5.0,5.0,5.0,0.9931554119589233
1354,8.2,push (add an element) pop (remove an element),5.0,5.0,5.0,0.9768963244339127
1355,8.2,Push and pop.,5.0,5.0,5.0,0.9920781302532681
1356,8.2,pop and push,5.0,5.0,5.0,0.9931554119589233
1357,8.2,push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. ),5.0,5.0,5.0,0.9694523289310457
1358,8.2,pop and push,5.0,5.0,5.0,0.9931554119589233
1359,8.2,"push and pop, push puts an object into the list, and pop takes the last object off.",5.0,5.0,5.0,0.9781271553578847
1360,8.2,Push and Pop are the two main functions of a stack,5.0,5.0,5.0,0.9838829282063175
1361,8.2,Push and Pop,5.0,5.0,5.0,0.9866794546853906
1362,8.2,"push, which adds an element to the stack... and pop which takes an element off the stack",5.0,5.0,5.0,0.9820615639403721
1363,8.2,"Push and Pop, which add and remove data from the stack, respectively.",5.0,5.0,5.0,0.9692100090058622
1364,8.2,push and pop,5.0,5.0,5.0,1.0
1365,8.2,pop - to remove item push - to insert an element ,5.0,5.0,5.0,0.9839204347444426
1366,8.2,Pop and push,5.0,5.0,5.0,0.9889923414755389
1367,8.2,pop and push,5.0,5.0,5.0,0.9931554119589233
1368,8.2,push - adds an item to the top of the stack pop - removes the top item from the stack,5.0,5.0,5.0,0.9773217775683556
1369,8.2,push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack,5.0,5.0,5.0,0.9752586331351089
1370,8.3,An array has a fixed size.  You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added.  Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.,5.0,5.0,5.0,0.9890869307480117
1371,8.3,By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.,5.0,5.0,5.0,0.9902817576084365
1372,8.3,"If you use a dynamically allocated array, you must provide a destructor and copy constructor.",2.0,4.0,3.0,0.9875961174524366
1373,8.3,"Create a int value that stores the ""head"" of the stack. Increment the top when one element is pushed and decrement after it is popped.",5.0,5.0,5.0,0.9925032464492286
1374,8.3,Use a pointer that always points to the end of the array list for push/pop modifications.,5.0,4.0,4.5,0.9912718014193017
1375,8.3,if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.,5.0,4.0,4.5,0.9896577719034273
1376,8.3,You predetermine the size of the stack as you would an array.  This type can not grow. ,1.0,4.0,2.5,0.9907263929030135
1377,8.3,"Declare a variable that points the last item in the array, which increases (++) when items are pushed onto the stack, and decreases (--) when an item is popped off the top.",5.0,5.0,5.0,0.9849781643038155
1378,8.3,"Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop. ",5.0,4.0,4.5,0.9898108410678836
1379,8.3,"You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.",5.0,3.0,4.0,0.9835357664753833
1380,8.3,"Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad",5.0,4.0,4.5,0.9905071933571177
1381,8.3,treat the beginning of the array as the beginning of the stack,4.0,4.0,4.0,0.9923047930255201
1382,8.3,Use an index value called top to keep track of the last element in the array.,5.0,4.0,4.5,0.9908600555555855
1383,8.3,create an array and implement pointers that point to the next list item down and stack them up.,1.0,3.0,2.0,0.9887792331206962
1384,8.3,"for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.",3.0,4.0,3.5,0.9890922128525195
1385,8.3,"Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop",5.0,4.0,4.5,0.985315436792715
1386,8.3,"with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array",4.0,4.0,4.0,0.9947572785832829
1387,8.3,Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.,5.0,4.0,4.5,0.9875059900270063
1388,8.3,"Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.",4.0,4.0,4.0,0.985020384352364
1389,8.3,define an array and keep track of a pointer to the last element as items are added,5.0,3.0,4.0,0.9888345194962659
1390,8.3,"By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the ""top"" tracking integer is incremented.",5.0,4.0,4.5,0.9884187975457174
1391,8.3,"Allocate an array of some size, bottom stack element stored at element 0",4.0,4.0,4.0,0.9878343741247424
1392,8.3,you store the stack in the array but you have to keep in mind the first element,3.0,3.0,3.0,0.9906255670069987
1393,8.3,You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.,5.0,3.0,4.0,0.9921106012572534
1394,8.3,"using arrays, you are pushing one int at a time into the stack until you get to the end of your array",4.0,4.0,4.0,0.9868799346480253
1395,8.3,"by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list",5.0,3.0,4.0,0.9831162250956554
1396,8.3,"Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. ",2.0,4.0,3.0,0.9893871792659293
1397,8.4,You can add an element to the end of the linked list and update a pointer called top each time you modify the list.,2.0,4.0,3.0,0.9920274863187104
1398,8.4,You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.,5.0,5.0,5.0,0.9930987597625575
1399,8.4,This is the implementation of the stack using single linked list.   The operations performed on a stack are    1)push(): This is the function which is for insertion(pushing)of an element into stack                      It is similar to the insertion of an element at the end of a single linked list                   see  the function insert_end() in the program for operations of single linked list    2)pop(): This is the function which is for deletion(popping up) of an element from the stack             It is similar to the deletion of an element at the end of a single linked list       see  the function delete_end() in the program for operations of single linked list    3)stack_display():This is the function which is for displaying the elements of a stack,3.0,5.0,4.0,0.9729377884934194
1400,8.4,Using nodes to keep track of the head of the stack. Then using Push( ) and Pop ( ) to create the stack as needed.,4.0,4.0,4.0,0.9936794231092119
1401,8.4,"Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.",5.0,4.0,4.5,0.9975745057434732
1402,8.4,you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.,5.0,4.0,4.5,0.9940677646851115
1403,8.4,You dynamicly create space as the stack grows.  The stack can be as long as you need.,1.0,4.0,2.5,0.9868272791869117
1404,8.4,"Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.",5.0,5.0,5.0,0.9955647624925059
1405,8.4,Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.,4.0,4.0,4.0,0.9911145300211175
1406,8.4,"A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.",4.0,3.0,3.5,0.9898151652441963
1407,8.4,"make a list, make the bottom the head, add on the end and make the end top",3.0,4.0,3.5,0.9856806422825665
1408,8.4,use the add function with a list as the beginning of the stack and remove for pop,5.0,4.0,4.5,0.9927680827972135
1409,8.4,Use head as the top and push and pop nodes from the head.,5.0,4.0,4.5,0.9883161171798414
1410,8.4,create a node based list that points to the next list item down.,0.0,3.0,1.5,0.9888543179398455
1411,8.4,"have the head of the list be the last item added, and a push just adds a new head.",5.0,4.0,4.5,0.9965006832684701
1412,8.4,"Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.",5.0,4.0,4.5,0.9887907601288446
1413,8.4,adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.,3.0,4.0,3.5,0.9941405652384909
1414,8.4,"You can implement a stack using arrays or and linked list. By the use of pointers, that point element(node) to the next element in the stack. By the use of pointers, the stack becomes a linked list.",1.0,4.0,2.5,0.986636493585014
1415,8.4,Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.,5.0,4.0,4.5,0.991868878375187
1416,8.4,use a linked list and keep track of a pointer that points to the first item,4.0,4.0,4.0,0.991174810424362
1417,8.4,"A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.",5.0,4.0,4.5,0.985144435838946
1418,8.4,using pointer ,0.0,3.0,1.5,0.9745467777387119
1419,8.4,the top is the first pointer.,3.0,3.0,3.0,0.9843624817117753
1420,8.4,"Keep a pointer pointing to the last element entered at the front of  the array and move the pointer ""back"" when you delete an element.",2.0,3.0,2.5,0.9894193722000791
1421,8.4,"using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list",1.0,4.0,2.5,0.9888483757292543
1422,8.4,"have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.",5.0,5.0,5.0,0.9782238598664936
1423,8.4,"Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c",0.0,4.0,2.0,0.9915791015192148
1451,8.6,They are converted to post fix expressions.  It still follow the order of precedence for the operators.,5.0,5.0,5.0,0.9849798662183104
1452,8.6,They are first converted to postfix expressions and then evaluated.,5.0,5.0,5.0,0.9871793570531775
1453,8.6,"Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.",5.0,5.0,5.0,0.9940912918342522
1454,8.6,By using parentheses to have order in the expression.,2.0,3.0,2.5,0.9896253090225735
1455,8.6,In postfix notation.,3.0,5.0,4.0,0.985838789797687
1456,8.6,computers usually convert infix expressions to post fix expression and evaluate them using a stack.,5.0,5.0,5.0,0.9890457138282267
1457,8.6,they are converted to postfix,5.0,5.0,5.0,0.9828722808274696
1458,8.6,Infix expressions are interpreted as postfix expressions by implementing stacks.,5.0,5.0,5.0,0.9908823696236395
1459,8.6,They are first converted into an equivalent postfix expression so it can be read by the computer.,5.0,5.0,5.0,0.9896607675933764
1460,8.6,"The computer translates the infix expression to a postfix expression, then solves.",5.0,5.0,5.0,0.9911890983246203
1461,8.6,in postfix format,3.0,5.0,4.0,0.9825305229432997
1462,8.6,they use parenthisis and a stack to determine which evaluations need to be made first,3.0,3.0,3.0,0.9831221208103638
1463,8.6,By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered. ,4.0,5.0,4.5,0.9879612197330601
1464,8.6,by being passed to the function by a leading term,0.0,3.0,1.5,0.9876294252384498
1465,8.6,"i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a "")"" and once that happens, perform the operations until you reach an ""(""... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.",1.0,4.0,2.5,0.9728028127829476
1466,8.6,The infix expression is converted to postfix form ,5.0,5.0,5.0,0.9880438559129937
1467,8.6,by converting them to postfix expressions and putting the operations in a stack,5.0,5.0,5.0,0.9878820830807168
1468,8.6,The computer converts the infix expression to postfix form. Then evaluates the postfix expression.,5.0,5.0,5.0,0.9871680268476895
1469,8.6,infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.,5.0,5.0,5.0,0.9904231727406597
1470,8.6,infix expressions are pointers evaluated by reference to the memory location,0.0,3.0,1.5,0.9913576355619156
1471,8.6,computers convert infix expressions to postfix form before evaluation,5.0,5.0,5.0,0.9892363832792682
1472,8.6,convert infix expressions to postfix expression and evaluate the postfix expression,5.0,5.0,5.0,0.988487655348072
1473,8.6,"When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",4.0,4.0,4.0,0.9930529613068428
1474,8.6,Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.,5.0,5.0,5.0,0.9892123166368164
1475,8.6,"infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)",5.0,5.0,5.0,0.9944340832187558
1476,8.6,"they are transformed into post-fix expressions, then evaluated with a stack.",5.0,5.0,5.0,0.9933951844248187
1477,8.6,"Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in ""a + b"").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written ""+ a b"".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written ""a b +"".  (You may have seen this as ""reverse Polish notation"".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. ",5.0,5.0,5.0,0.9824219844432289
1478,8.7,isEmptry()//determines if the stack is full or not pop()//to remove the top element if it is not the on you are looking for search()//you compare each element of the stack to the data you are looking for.,2.0,4.0,3.0,0.9863444355482318
1479,8.7,You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.,2.0,4.0,3.0,0.9929034372416293
1480,8.7,Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.,2.0,4.0,3.0,0.9918736226268219
1481,8.7,"Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop( ) function to pop off each element and then compare it. If its not the element your looking for, Push ( ) it to the temp stack. Repeat until the element is found. When you find it,  Pop ( ) off the temp stack back onto the regular stack to have a complete stack again.",5.0,5.0,5.0,0.9882840148281382
1482,8.7,"Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.",5.0,5.0,5.0,0.9933167912577484
1483,8.7,"if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.",4.0,5.0,4.5,0.9949734850119041
1484,8.7,"You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.",3.0,4.0,3.5,0.9950769723502982
1485,8.7,"Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stack (this will ensure the order of the elements is maintained).",5.0,5.0,5.0,0.9892413979102358
1486,8.7,Basically pop the stack until you find the given element.,3.0,4.0,3.5,0.9890626810898941
1487,8.7,"Iterate through the stack, checking the number against the current element.",0.0,3.0,1.5,0.9925966675649036
1488,8.7,pop and push,2.0,4.0,3.0,0.9931554119589233
1489,8.7,pop all elements off stack until you find that element and then push the popped elements back on the stack,5.0,5.0,5.0,0.9931652532881907
1490,8.7,"Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.",5.0,5.0,5.0,0.9933898536698832
1491,8.7,either traverse the entire list and pop the given part or create a pointer system that automatically points to it.,2.0,4.0,3.0,0.9940334386499945
1492,8.7,"Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.",5.0,5.0,5.0,0.9930417090236935
1493,8.7,if top item != given element pop the stack. Repeat until item is found or stack is empty,3.0,4.0,3.5,0.9890847912564162
1494,8.7,could traverse through the list/array to find the element.,1.0,3.0,2.0,0.987804607758014
1495,8.7,you need the pop opertation to go throught the stack and find the element.,3.0,4.0,3.5,0.9888598753530411
1496,8.7,"createStack, push, isEmpty, pop, and a boolean return value.",2.0,4.0,3.0,0.9780424202403636
1497,8.7,you would have to traverse the stack popping each element to search it,3.0,4.0,3.5,0.9893043101835488
1498,8.7,Pop each element off the stack (and into another stack for storage) until the desired element is found.,4.0,4.0,4.0,0.9881803964825632
1499,8.7,pop operation,1.0,4.0,2.5,0.966026174859829
1500,8.7,to pop elements then push them back,4.0,5.0,4.5,0.9853271582900667
1501,8.7,A function to keep track of the elements popped and a function to put  the popped elements backinto the function.,4.0,5.0,4.5,0.9933728230456438
1502,8.7,you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost,4.0,5.0,4.5,0.9930804186912021
1503,8.7,you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?),0.0,3.0,1.5,0.9907448336437221
1504,8.7,StackPush() StackPop() StackIsEmpty(),2.0,4.0,3.0,0.9813180003843264
1505,9.1,A data structure in c++ which is a collection of data that is kept in order.  First in first out.,5.0,5.0,5.0,0.9933479672465904
1506,9.1,a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.,4.0,4.0,4.0,0.9891642267850939
1507,9.1,A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.,5.0,5.0,5.0,0.9922188815491345
1508,9.1,"A queue stores a set of elements in a particular order.  Its principle of operation is FIFO(first in first out), which means the first element inserted is the first one to be removed.",5.0,5.0,5.0,0.9944898551297531
1509,9.1,An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.,5.0,5.0,5.0,0.9918587611233036
1510,9.1,"Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.",5.0,5.0,5.0,0.9925681821186476
1511,9.1,a queue is a data structure that stores elements in a First in First out order.,5.0,5.0,5.0,0.9896498069361029
1512,9.1,A waiting list of items that operation in a FIFO (first in first out) order.,5.0,5.0,5.0,0.9935165601459759
1513,9.1,"A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.",5.0,5.0,5.0,0.9939454235628101
1514,9.1,is a particular kind of collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First Out (FIFO Method).,5.0,5.0,5.0,0.9903801978708612
1515,9.1,Like a linked list but first in first out,4.0,5.0,4.5,0.9831399261208913
1516,9.1,A queue is a FIFO data structure.,5.0,5.0,5.0,0.9854565366053049
1517,9.1,A queue is a first in first out data structure.,5.0,5.0,5.0,0.9889853702844486
1518,9.1,"Its like a stack, but uses the linked list to stack a little differently. It's FIFO so the first thing enqueued is the first thing dequeued",5.0,5.0,5.0,0.9930817033260493
1519,9.1,"A first in, first out Abstract Data type that can be used to store values.",5.0,5.0,5.0,0.9913449413069272
1520,9.1,"Stores a set of elements in a particular order with a First In, First Out principle",5.0,5.0,5.0,0.9887416703940496
1521,9.1,object that stores elements in order that follows first in first out.  the first element added is the first one to come off.,5.0,5.0,5.0,0.9919994719434466
1522,9.1,"A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its ""First In, First Out"". The first element inserted is the first element to be removed.",5.0,5.0,5.0,0.990592828522987
1523,9.1,"a finite ordered list with zero or more elements, based upon First In First Out",5.0,5.0,5.0,0.9894350635625563
1524,9.1,a data structure that performs operations in the order of first in first out FIFO,5.0,5.0,5.0,0.9924470417752586
1525,9.1,"A Queue is a ""first in first out"" data structure, such that the first element added is also the first removed.",5.0,5.0,5.0,0.993577177819525
1526,9.1,"Queue is a buffer, which store element in a particular order",2.0,5.0,3.5,0.9859925486281174
1527,9.1,"stores a set of elements where the first element in, is the first element to be removed",5.0,5.0,5.0,0.9915168582548837
1528,9.1,A data structure that removes nodes from the head and adds nodes at the tail.,5.0,5.0,5.0,0.9932249639172632
1529,9.1,a queue is a list of things that follows the first in first out behavior,5.0,5.0,5.0,0.9885563877505827
1530,9.1,"a queue is a storage container that holds its objects in a first in, first out priority",5.0,5.0,5.0,0.992133988973661
1531,9.1,"The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.",5.0,5.0,5.0,0.9907229842495385
1532,9.2,enqueue which adds data to the queue and dequeue which deletes data from the queue,5.0,5.0,5.0,0.9838720982391453
1533,9.2,"enqueue , which inserts a specified element at the head of the specified queue, and dequeue , which removes the specified element from the queue.",5.0,5.0,5.0,0.9743493441614717
1534,9.2,The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.,5.0,5.0,5.0,0.978337211339284
1535,9.2,The two main functions are enqueue and dequeue.,5.0,5.0,5.0,0.9865501057253439
1536,9.2,Enqueue and Dequeue,5.0,5.0,5.0,1.0
1537,9.2,Enqueue and Dequeue,5.0,5.0,5.0,1.0
1538,9.2,enqueue - insert into queue dequeue - remove element,5.0,5.0,5.0,0.9785125161198831
1539,9.2,"Remove the item added first, add items to the back.",5.0,5.0,5.0,0.9832239109306665
1540,9.2,The two main functions of a queue are enqueue and dequeue. ,5.0,5.0,5.0,0.9868012081922023
1541,9.2,enqueue and dequeue.,5.0,5.0,5.0,0.9986383493834414
1542,9.2,enqueue and dequeue,5.0,5.0,5.0,1.0
1543,9.2,Enqueue and Dequeue,5.0,5.0,5.0,1.0
1544,9.2,enqueue and dequeue,5.0,5.0,5.0,1.0
1545,9.2,enqueue and dequeue,5.0,5.0,5.0,1.0
1546,9.2,"enque ( Data ),  Deque ( )",5.0,5.0,5.0,0.9786260581202236
1547,9.2,enqueue and dequeue,5.0,5.0,5.0,1.0
1548,9.2,enqueue and dequeue,5.0,5.0,5.0,1.0
1549,9.2,"The two functions are, Enqueue and Dequeue",5.0,5.0,5.0,0.9890869035323588
1550,9.2,"enqueue, dequeue",5.0,5.0,5.0,0.9906937723954304
1551,9.2,"enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue",5.0,5.0,5.0,0.9777271838907772
1552,9.2,"Enqueue and dequeue, which add and remove elements from the queue",5.0,5.0,5.0,0.9858463247516395
1553,9.2,Enqueue and Dequeue,5.0,5.0,5.0,1.0
1554,9.2,dequeue and enqueue,5.0,5.0,5.0,1.0
1555,9.2,enqueue and dequeue,5.0,5.0,5.0,1.0
1556,9.2,enqueue and dequeue,5.0,5.0,5.0,1.0
1557,9.2,enqueue dequeue,5.0,5.0,5.0,0.9945510297083265
1558,9.2,rear and front ,2.0,3.0,2.5,0.9856369188316001
1559,9.3,Make use of a front pointer and a tail pointer.  When the tail pointer reaches the end of an array it gets reset to the front of the array.  If the two pointers are equal then the queue is either full or just has one element.,5.0,4.0,4.5,0.9941112689335678
1560,9.3,you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.,2.0,4.0,3.0,0.9898286412488468
1561,9.3,By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.,2.0,4.0,3.0,0.9914651813713021
1562,9.3,"For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue. ",1.0,4.0,2.5,0.9924189586775104
1563,9.3,Keep track of the front and the back of the array as you increase and decrease the elements inside the array.,4.0,4.0,4.0,0.9908672573727145
1564,9.3,"Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.",5.0,4.0,4.5,0.9889220080631678
1565,9.3,you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.,3.0,5.0,4.0,0.9890087714167419
1566,9.3,Utilizing indexes for the front and the back.  Front is 0 and as you add items the back index is incremented.,4.0,4.0,4.0,0.993115644191705
1567,9.3,"Declare two variables, â€œfrontâ€ and â€œrearâ€, to be used to denote which elements in the array can be accessed. Increment â€œrearâ€ whenever data is enqueued to the end and increment â€œfrontâ€ whenever data is dequeued.",5.0,4.0,4.5,0.9908798288176484
1568,9.3,It is an array of fixed size. A queue of maximum N elements.,1.0,4.0,2.5,0.9896692415134691
1569,9.3,"make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from",4.0,4.0,4.0,0.9932841058056368
1570,9.3,By using the beginning of the array as the removal point of the queue (or beginning of the queue) and the ith element as the end of the queue.,3.0,4.0,3.5,0.9960321003642361
1571,9.3,"add in data from the first element to the last, take out data from the first element to the last.",2.0,4.0,3.0,0.9949196680125908
1572,9.3,you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom,3.0,4.0,3.5,0.9881274139369121
1573,9.3,"create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.",4.0,4.0,4.0,0.9932296421378629
1574,9.3,Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration,4.0,4.0,4.0,0.9960226672691727
1575,9.3,"add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.",3.0,4.0,3.5,0.9900679462049438
1576,9.3,"To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.",2.0,4.0,3.0,0.991750122209972
1577,9.3,fixed size array with max N elements.  Need to keep track of front and rear of array.,4.0,4.0,4.0,0.9909085943880982
1578,9.3,"by keeping track of a front item and a rear item, or with a circular array that uses the modulo function",5.0,5.0,5.0,0.9937768012267992
1579,9.3,"Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.",5.0,5.0,5.0,0.9959629300649951
1580,9.3,"A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back",0.0,4.0,2.0,0.9942905589013696
1581,9.3,remove the element then shift the elements one space back,2.0,4.0,3.0,0.9914373476592492
1582,9.3,By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.,5.0,5.0,5.0,0.9928206305950069
1583,9.3,an array is a type of queue with a fixed length,0.0,3.0,1.5,0.9858813352958001
1584,9.3,"your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full",5.0,5.0,5.0,0.9928516682760924
1585,9.3,Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1,5.0,5.0,5.0,0.9829599692343459
1586,9.4,A list can have unlimited elements in it.  You can push a node onto the end of the list and pop the one in the front.,5.0,5.0,5.0,0.9814953983830755
1587,9.4,theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows,0.0,4.0,2.0,0.9872923830461249
1588,9.4,"By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.",5.0,5.0,5.0,0.9916723982434736
1589,9.4,You can use list to represent the items in a queue.,0.0,3.0,1.5,0.9785338683155878
1590,9.4,Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.,3.0,4.0,3.5,0.9870577459817719
1591,9.4,Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.,5.0,5.0,5.0,0.991142980596842
1592,9.4,you use the first element in the list as the remove point for the queue and insert items at the end of the list.,5.0,5.0,5.0,0.9854354010977967
1593,9.4,"Utilizing a front pointer and a back pointer.  The front poiner and back pointer points to the first item into the queue.  As you add items, the front remains the same but the back poiner 'next' points to the new item and the new item is assigned to become the 'new' back pointer.",5.0,4.0,4.5,0.9874091545592757
1594,9.4,Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.,5.0,4.0,4.5,0.9842084836856579
1595,9.4,Check if list is empty and add elements to the list.,1.0,4.0,2.5,0.9824836786113768
1596,9.4,"make a linked list and add on to the front and delete from the back, keep track of both to do so.",5.0,4.0,4.5,0.9884395668071906
1597,9.4,by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue,5.0,4.0,4.5,0.987269254515505
1598,9.4,throw in data at the head and take it out at the tail,4.0,5.0,4.5,0.9794802878810471
1599,9.4,"You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue",2.0,4.0,3.0,0.9902651494793938
1600,9.4,"fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.",5.0,4.0,4.5,0.9911215116843638
1601,9.4,"Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.",5.0,4.0,4.5,0.9887631819524088
1602,9.4,"create a node with the input data, continue to add to the list.  when dequeueing - get the first elements data and set the next element in the list as the new first element",4.0,4.0,4.0,0.9886277124214401
1603,9.4,"A linked list with Stack principles. The Queue's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could  be called the head pointer.",2.0,4.0,3.0,0.9886753906993812
1604,9.4,linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.,3.0,4.0,3.5,0.98223924505823
1605,9.4,"a queue can be implemented in a list by keeping track of two pointers, a head and a tail",5.0,4.0,4.5,0.9813711102767392
1606,9.4,"each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.",5.0,5.0,5.0,0.9874037399217526
1607,9.4,"Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)",3.0,5.0,4.0,0.9801867213252279
1608,9.4,remove the first element and reference the second element as the new head of the list. ,3.0,4.0,3.5,0.9867479881995752
1609,9.4,By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.,5.0,5.0,5.0,0.9855822561674593
1610,9.4,you would have your list and add a back pointer so that your program knows where the end is,4.0,4.0,4.0,0.984300817813305
1611,9.4,"your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list",4.0,5.0,4.5,0.9909400410601716
1612,9.4,      temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   } ,3.0,4.0,3.5,0.9586392265393878
1640,9.6,Push.,5.0,5.0,5.0,0.949310408118998
1641,9.6,"push, which inserts something at the top of the stack.",5.0,5.0,5.0,0.9460803263843652
1642,9.6,The stack operation corresponding to enqueue in queues is the push operation.,5.0,5.0,5.0,0.9413693592148363
1643,9.6,"Push in a stack operation corresponds to the enqueue operation in queues.  These operations insert a new item into one end(the top and back, respectively) of the ADT.",5.0,5.0,5.0,0.9313469705888442
1644,9.6,The stack operation is almost the opposite of the enqueue operation.,0.0,5.0,2.5,0.9345323880615702
1645,9.6,push = enqueue pop = dequeue,5.0,4.0,4.5,0.9486556835118815
1646,9.6,push,5.0,5.0,5.0,1.0
1647,9.6,Not sure what this question means.  You can use the stack 'push' operation and the enqueue operation to detect palindromes.  ,5.0,5.0,5.0,0.9249829523202394
1648,9.6,"Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.",5.0,5.0,5.0,0.935270146320222
1649,9.6,Push operation.,5.0,5.0,5.0,0.945237328557159
1650,9.6,push,5.0,5.0,5.0,1.0
1651,9.6,push,5.0,5.0,5.0,1.0
1652,9.6,push,5.0,5.0,5.0,1.0
1653,9.6,push,5.0,5.0,5.0,1.0
1654,9.6,"that would be the push operation, if it put the item at the end of the list.",5.0,5.0,5.0,0.9387492072971273
1655,9.6,push,5.0,5.0,5.0,1.0
1656,9.6,push,5.0,5.0,5.0,1.0
1657,9.6,the Push method in the stack operations.,5.0,5.0,5.0,0.9433334120645281
1658,9.6,push,5.0,5.0,5.0,1.0
1659,9.6,enqueue corresponds with push dequeue corresponds with pop,5.0,4.0,4.5,0.948215543704906
1660,9.6,"Push corresponds with enqueue, both very similarly place new elements into their stack or queue",5.0,5.0,5.0,0.9358028912802085
1661,9.6,FIFO: First in First out,0.0,3.0,1.5,0.9404047379311208
1662,9.6,push,5.0,5.0,5.0,1.0
1663,9.6,Push,5.0,5.0,5.0,0.9643222030490232
1664,9.6,push,5.0,5.0,5.0,1.0
1665,9.6,push,5.0,5.0,5.0,1.0
1666,9.6,push ,5.0,5.0,5.0,1.0
1694,10.1,A hierarchy of nodes that are sorted in a particular order.  Each node has a ancestor (except for the root) and children (except for the leaves).   ,3.0,5.0,4.0,0.9932750643004931
1695,10.1,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.,5.0,5.0,5.0,0.980885625355564
1696,10.1,A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.,4.0,5.0,4.5,0.9790843289467459
1697,10.1,"A connected, undirected graph without cycles.",4.0,5.0,4.5,0.9873392239126558
1698,10.1,"A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the ""base"" of the tree, it has no parents. A ""leaf"" is a node at the end of the tree which points to NULL.",5.0,5.0,5.0,0.9929299953769326
1699,10.1,a tree is a series of nodes where each node has links to other nodes.,1.0,5.0,3.0,0.9816375928437392
1700,10.1,"an infinite set of nodes that have a root and descendants, and each addition is a leaf.",2.0,5.0,3.5,0.9881382555994283
1701,10.1,"A set of one or more nodes that are hierarchically organized, with one special â€œrootâ€ node.",3.0,5.0,4.0,0.9861947344289707
1702,10.1,A tree is a finite set of one or more nodes such that there is a specially designated node called the root. ,2.0,5.0,3.5,0.9791795491305876
1703,10.1,one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees ,5.0,5.0,5.0,0.9792136248507392
1704,10.1,A tree is a data structure where nodes are linked to each other in a hierarchical manner. ,2.0,5.0,3.5,0.9816333457274099
1705,10.1,a grouping of data in a parent to child structure,2.0,4.0,3.0,0.9809759783529407
1706,10.1,It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.,1.0,5.0,3.0,0.9813991776002821
1707,10.1,"A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.",4.0,5.0,4.5,0.992753424067256
1708,10.1,"It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. ",5.0,5.0,5.0,0.9945451898288584
1709,10.1,"A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.",5.0,5.0,5.0,0.9869512627121549
1710,10.1,A finite set of nodes that starts with the root and terminates with leaves.,3.0,5.0,4.0,0.9835429319062208
1711,10.1,"a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",1.0,4.0,2.5,0.9875585126820926
1712,10.1,"A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.",4.0,5.0,4.5,0.9942871798627629
1713,10.1,"a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children",4.0,5.0,4.5,0.996688732674554
1714,10.1,"A nonlinear, two-dimensional data structure.",0.0,4.0,2.0,0.9867618011985781
1715,10.1,a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root,3.0,5.0,4.0,0.9830180747275439
1716,10.1,"A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree",5.0,5.0,5.0,0.9951901004708507
1717,10.1,A type of data structure in which each element is attached to one or more elements directly beneath it. ,3.0,5.0,4.0,0.9797086147646051
1718,10.2,"Each level of a generation in the tree, some people do not count the root as a generation",4.0,4.0,4.0,0.9944974703172664
1719,10.2,"The height of a tree is in terms of the levels of its nodes such that, if  the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.",4.0,5.0,4.5,0.9907268129556088
1720,10.2,The height of a tree is the number of nodes on the longest path from the root to a leaf.,5.0,5.0,5.0,0.9972948153089543
1721,10.2,The number of nodes on the longest path from the root of the tree to a leaf.,5.0,5.0,5.0,0.9989947131069371
1722,10.2,Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.,5.0,5.0,5.0,0.9940603741616489
1723,10.2,the height of a tree is the length from the root to the furthest leaf,5.0,5.0,5.0,0.9952614169141472
1724,10.2,The height is the number of generations (levels) from the root.,4.0,5.0,4.5,0.9944774613915249
1725,10.2,The height of a tree is the number of levels between the root and the leaf farthest away from it.,5.0,5.0,5.0,0.9974467904597123
1726,10.2,is the depth of its furthest leaf,4.0,5.0,4.5,0.9945416363315769
1727,10.2,the number of nodes from root to leaf,3.0,4.0,3.5,0.9948004588106265
1728,10.2,the distance from the deepest leaf to the root,5.0,5.0,5.0,0.9960106857599748
1729,10.2,the number of generations or levels of a tree,4.0,5.0,4.5,0.9925188090529329
1730,10.2,"The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.",2.0,4.0,3.0,0.9902904186277182
1731,10.2,"the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.",3.0,4.0,3.5,0.9902505911370003
1732,10.2,The number of nodes on the longest path from the root to the leaf.,5.0,5.0,5.0,0.9989369588118543
1733,10.2,The height of a tree is the number of nodes on the longes path from the root to a leaf.,5.0,5.0,5.0,0.9972948153089543
1734,10.2,is equal to the number of levels.  levels between the root node and the terminal nodes.,4.0,5.0,4.5,0.9968594391192902
1735,10.2,the number of generations or levels the tree has,4.0,5.0,4.5,0.993571275234276
1736,10.2,"The height of a tree is the depth of its subtrees, that is, how many layers deep it is.",4.0,5.0,4.5,0.9938576772933393
1737,10.2,is the number of generations in the tree,4.0,5.0,4.5,0.9943411542146051
1738,10.2,The number of nodes on the longest path from the root to a leaf.,5.0,5.0,5.0,0.9987913943557495
1739,10.2,the number of distinct levels of separation,3.0,5.0,4.0,0.9940660005470776
1740,10.2,the height of a tree is how many levels of nodes that it has,4.0,5.0,4.5,0.9935273646937005
1741,10.2,The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.,0.0,3.0,1.5,0.9947413225582653
1742,10.3,A leaf is a child of a parent node that has no children nodes of its own.,5.0,5.0,5.0,0.992794792193626
1743,10.3,A leaf is a node with no children.,5.0,5.0,5.0,0.992364258433138
1744,10.3,A node with no children.,5.0,5.0,5.0,0.9960684530684973
1745,10.3,A tree node with no children.,5.0,5.0,5.0,0.9939869831816788
1746,10.3,And end point of the tree... a node that does not have any children.,5.0,5.0,5.0,0.9940443820695914
1747,10.3,a node with no children.,5.0,5.0,5.0,0.9942145328063539
1748,10.3,A new item to the tree--a child,2.0,4.0,3.0,0.9918037265093594
1749,10.3,"A leaf is a node with children, it is a terminating node.",0.0,4.0,2.0,0.9925366276311424
1750,10.3,The node with degree 0.,3.0,5.0,4.0,0.9953418687279063
1751,10.3,the node with degree 0,3.0,5.0,4.0,0.993286580677571
1752,10.3,a leaf is a node with no children,5.0,5.0,5.0,0.9920366003528213
1753,10.3,the last child on any branch,4.0,5.0,4.5,0.9932501507442875
1754,10.3,The last value in the tree. A value with no children attatched. ,5.0,5.0,5.0,0.9953903684437287
1755,10.3,a node with no children.,5.0,5.0,5.0,0.9942145328063539
1756,10.3,A node with no children.,5.0,5.0,5.0,0.9960684530684973
1757,10.3,A leaf is a node with no children,5.0,5.0,5.0,0.9914434656631481
1758,10.3,a node with degree 0.  last node in the tree and furtherest away from the root.,3.0,5.0,4.0,0.9936247116272587
1759,10.3,an endpoint on a tree that contains no pointers or pointers that are set to null,4.0,5.0,4.5,0.9953779209112054
1760,10.3,A leaf is a node with no children.,5.0,5.0,5.0,0.992364258433138
1761,10.3,an element in a tree that has no children ,5.0,5.0,5.0,0.9952242950628267
1762,10.3,A node with no children.,5.0,5.0,5.0,0.9960684530684973
1763,10.3,a leaf is a node that has no children nodes,5.0,5.0,5.0,0.9961150089722559
1764,10.3,a leaf is a node with no children,5.0,5.0,5.0,0.9920366003528213
1765,10.3,"The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.",5.0,5.0,5.0,0.9890124144898838
1766,10.4,"A tree data structure in which each done has at most two children, typical called left and right nodes.  The right node is usually greater than the left node and the parent node.",4.0,5.0,4.5,0.9854062773727459
1767,10.4,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.",5.0,5.0,5.0,0.9889867253497204
1768,10.4,"A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5.0,5.0,5.0,0.9878911288063025
1769,10.4,"A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.",5.0,5.0,5.0,0.9767663843429533
1770,10.4,A tree in which each parent has a maximum of 2 children.,5.0,5.0,5.0,0.9973212863629838
1771,10.4,a tree where each node has at most 2 children.,5.0,5.0,5.0,0.994132186971269
1772,10.4,a tree with up to two children or a right subtree and/or a left subtree,5.0,5.0,5.0,0.9957346917148364
1773,10.4,"A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",5.0,5.0,5.0,0.9930881919350372
1774,10.4,a binary tree is a tree data structure in which each node has at most two children.,5.0,5.0,5.0,0.9939203357097666
1775,10.4,"a tree with only 2 joints, left and right",4.0,5.0,4.5,0.9927512309167916
1776,10.4,A binary search tree is a tree that also has the condition that each node may have at maximum 2 children,4.0,5.0,4.5,0.9906346663996333
1777,10.4,a tree where each parent can have at max two children.,5.0,5.0,5.0,0.9963353435134077
1778,10.4,a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,1.0,3.0,2.0,0.9950867380467425
1779,10.4,a tree where each node can have at most 2 children.,5.0,5.0,5.0,0.9938545416346591
1780,10.4,"Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5.0,5.0,5.0,0.982773600190374
1781,10.4,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",5.0,5.0,5.0,0.9882654185818613
1782,10.4,a tree that has a maximum of 2 children per node,5.0,5.0,5.0,0.9960755695797755
1783,10.4,a tree with elements that can contain at most two pointers,5.0,5.0,5.0,0.9961639172356073
1784,10.4,A binary tree can have only two children for each node.,5.0,5.0,5.0,0.9930441154747737
1785,10.4,a tree where every parent has only two children,4.0,5.0,4.5,0.9953552304263825
1786,10.4,A tree where every node has no more than two children,5.0,5.0,5.0,0.9948213630967186
1787,10.4,"a binary tree is a special search tree where each node has either 2, 1, or 0 children",4.0,5.0,4.5,0.990425369102649
1788,10.4,a binary tree is a special type of tree where each node can only have at maximum 2 children,5.0,5.0,5.0,0.9930337216402795
1789,10.4,A binary tree is a special type of inverted tree in which each element has only two branches below it.,4.0,5.0,4.5,0.9930106863367321
1790,10.5,"A tree data structure where each node has a value, where the total order is defined on these values.  the left subtree contains only values less than the parent node, and vice versa for the right subtree.",5.0,5.0,5.0,0.9906997711994073
1791,10.5,A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.,5.0,5.0,5.0,0.9959678205954696
1792,10.5,"A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.",5.0,5.0,5.0,0.995006228328434
1793,10.5,"A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.",5.0,5.0,5.0,0.9943997025607033
1794,10.5,"A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. ",5.0,5.0,5.0,0.991263547685723
1795,10.5,a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.,4.0,5.0,4.5,0.9949363304238438
1796,10.5,a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,5.0,3.0,4.0,0.9959239981809889
1797,10.5,"Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",3.0,4.0,3.5,0.984858680524991
1798,10.5,"it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.",5.0,5.0,5.0,0.9828847266746963
1799,10.5,A binary tree with the data organized in a specific arangment,2.0,3.0,2.5,0.9918229126809255
1800,10.5,"A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",4.0,5.0,4.5,0.9950665032181998
1801,10.5,a binary tree in which the data is in order from left to right.,4.0,4.0,4.0,0.9912425290317023
1802,10.5,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes. ,3.0,4.0,3.5,0.9941859966463105
1803,10.5,"a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.",5.0,5.0,5.0,0.9949595118199396
1804,10.5,"A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.",5.0,5.0,5.0,0.9954589769544252
1805,10.5,A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.,1.0,4.0,2.5,0.9927014737867825
1806,10.5,it is similar to a binary tree.  The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.  the values in all nodes in the left subtree of a node are less than             the node value  the values in all nodes in the right subtree of a node are greater    than the node values  ,5.0,5.0,5.0,0.9836494050914215
1807,10.5,"a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",5.0,4.0,4.5,0.9925097771079476
1808,10.5,"A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.",5.0,5.0,5.0,0.9939824723304074
1809,10.5,"a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.",5.0,5.0,5.0,0.9951889706889607
1810,10.5,A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.,5.0,5.0,5.0,0.9941779491338645
1811,10.5,"a binary search tree is a special tree in which each node has at most two children, labeled left child and right child",1.0,4.0,2.5,0.9921646779145257
1812,10.5,"it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.",5.0,5.0,5.0,0.9897825608277572
1813,10.5,"Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",2.0,3.0,2.5,0.984635437169574
1814,10.6,"For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).",5.0,5.0,5.0,0.9881852379764494
1815,10.6,The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.,2.0,3.0,2.5,0.9889161512477221
1816,10.6,Traverses the binary tree in inorder.  It lets you visit the nodes in order according to their data values.,2.0,4.0,3.0,0.9859247616163916
1817,10.6,Its used to visit nodes of a binary search tree in a search key order.,3.0,4.0,3.5,0.9866316511497305
1818,10.6,(Left side of tree) (Root) (Right side of tree),5.0,5.0,5.0,0.9853115755423895
1819,10.6,printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.,5.0,5.0,5.0,0.9843705120640966
1820,10.6,"The in order is to go from left,root,right",5.0,5.0,5.0,0.9883759717146677
1821,10.6,"Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, itâ€™s parent, and itâ€™s right side sibling, then it goes up a level and repeats until it gets to the root.",4.0,5.0,4.5,0.989158919107438
1822,10.6,traverse the left subtree. visit the root. traverse the right subtree.,5.0,5.0,5.0,0.9875595524009381
1823,10.6,postorder,0.0,3.0,1.5,0.9586595190505329
1824,10.6,in order starts with the root then does right child then left child recursively,0.0,3.0,1.5,0.9820393154646045
1825,10.6,Left Child -&gt; Parent -&gt; Right Child,5.0,5.0,5.0,0.9885762757397443
1826,10.6,it goes from lowest to highest inside of the tree,1.0,3.0,2.0,0.9876567485110664
1827,10.6,"starting by displaying the node furthest to the right, then  the node, then the node on the right, in recursive order.",3.0,5.0,4.0,0.9964031213979352
1828,10.6,It travels left to right,3.0,4.0,3.5,0.9856753235154782
1829,10.6,void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } },5.0,5.0,5.0,0.9818862314643962
1830,10.6,"the root is in the middle.  The left subtree is traversed first, then the root, and finally the right subtree.",5.0,5.0,5.0,0.988183468662547
1831,10.6,"a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",5.0,5.0,5.0,0.993205795816178
1832,10.6,"Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.",5.0,5.0,5.0,0.9897086720610015
1833,10.6,left middle right,5.0,5.0,5.0,0.9653057710054737
1834,10.6,"You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",5.0,5.0,5.0,0.9939287996905012
1835,10.6,"you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process",5.0,5.0,5.0,0.9867064514983334
1836,10.6,"it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node",4.0,4.0,4.0,0.9895924202612384
1837,10.6,"Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. ",0.0,4.0,2.0,0.9903212872277466
1838,10.7,This is on the runtime order of log(n) where n is the number of nodes in the binary tree.,5.0,5.0,5.0,0.992782483417926
1839,10.7,In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.,5.0,5.0,5.0,0.989940964297478
1840,10.7,n-1/2 is the algorithm to compare and find an element. ,0.0,4.0,2.0,0.986502592800186
1841,10.7,At most its equivalent to the height of the tree.,5.0,5.0,5.0,0.9872250264529742
1842,10.7,Log(n),5.0,5.0,5.0,0.9817251540727457
1843,10.7,O(log n),5.0,5.0,5.0,0.9835749515197352
1844,10.7,Depends on what half of the tree and the levels you have.,3.0,4.0,3.5,0.9851439475738883
1845,10.7,O(log n) in balanced trees,5.0,5.0,5.0,0.9838604627939866
1846,10.7,n-1,2.0,3.0,2.5,0.9584800895608536
1847,10.7,log(n),5.0,5.0,5.0,0.9743966247156081
1848,10.7,O(nlog(n)),0.0,5.0,2.5,0.9819704347239849
1849,10.7,nLog(n),0.0,4.0,2.0,0.9817251540727457
1850,10.7,logn,5.0,5.0,5.0,0.9584800895608536
1851,10.7,"at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.",4.0,5.0,4.5,0.9905960790427103
1852,10.7,O(n),2.0,4.0,3.0,0.9817251540727457
1853,10.7,It takes at most 3 comparisons to find and element in a binary search tree,0.0,3.0,1.5,0.9845316438176718
1854,10.7,log (n)   where n equals the number of nodes.,5.0,5.0,5.0,0.9849413265446031
1855,10.7,it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level,5.0,5.0,5.0,0.9874070862651142
1856,10.7,At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.,5.0,5.0,5.0,0.9909995875792266
1857,10.7,O(log n),5.0,5.0,5.0,0.9835749515197352
1858,10.7,log n comparisons,5.0,5.0,5.0,0.9701718749950965
1859,10.7,(n^k)-1   where k is the height of the tree,0.0,3.0,1.5,0.9887204290825953
1860,10.7,"it takes h comparisons, where h is the height of the tree",5.0,5.0,5.0,0.988263874636978
1861,10.7,2 way key comparison ,0.0,2.0,1.0,0.9767493823333318
1862,11.1,"The name of the class file, the parameters it must take to perform its function.  Also a brief description of what the class does.",1.5,3.75,2.625,0.9855147507302272
1863,11.1,"access specifiers and functions, oftentimes a constructor.",3.0,3.0,3.0,0.9930078021274983
1864,11.1,"The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.",5.0,5.0,5.0,0.9878959622364353
1865,11.1,"Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})",2.5,5.0,3.75,0.9921729931259677
1866,11.1,Member functions and data members.,5.0,5.0,5.0,1.0
1867,11.1,the functions and variables used when the object is defined for the class.,5.0,3.0,4.0,0.9938251484017575
1868,11.1,"Data members, functions and function definitions, variables.",5.0,5.0,5.0,0.991737104059911
1869,11.1,return type and input parameters,1.5,2.5,2.0,0.9874754113849251
1870,11.1,Constructor Data members Methods,5.0,4.0,4.5,0.9976073535669061
1871,11.1,"Function members and member attributes, or in other words, the class variables and functions.",5.0,5.0,5.0,0.9921927066252556
1872,11.1,"The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.",4.0,4.0,4.0,0.9882836591098518
1873,11.1,The variables and function prototypes.,5.0,3.0,4.0,1.0
1874,11.1,public and private variables and initiations of functions included in the class.,4.5,2.5,3.5,0.9942242569323176
1875,11.1,The return value and the accepted value.,1.5,1.25,1.375,0.9989753796025135
1876,11.1,"A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.",5.0,2.5,3.75,0.9849258655395922
1877,11.1,"Parameters and their type, Class name, and return type, and the code to be executed in the class.",2.0,3.75,2.875,0.981210269117737
1878,11.1,"data members, class variables, and functions",5.0,5.0,5.0,0.9925214509728708
1879,11.1,"Constructor, functions, and variables native to the class.",5.0,3.0,4.0,0.9876010243786881
1880,11.1,functions and data members,5.0,5.0,5.0,0.9971142333766506
1881,11.1,data members and function definitions,5.0,5.0,5.0,0.9996644236431786
1882,11.1,member functions and data members,5.0,5.0,5.0,0.9996644236431786
1883,11.1,"constructor, and function definitions.",3.5,2.5,3.0,0.9909381415026864
1884,11.1,class name data of class definition of functions and methods,5.0,3.75,4.375,0.9855586932376978
1885,11.1,"A class definition includes the definitions of the class' constructor(s) and any public or private functions. Of course, it also #includes the class header and any necessary C libraries",3.0,2.5,2.75,0.9799352195741821
1886,11.1,"Class name, {}, semicoln at the end of the defination, private and bublic followed by "": """,2.5,2.5,2.5,0.9780548689603437
1887,11.1,"a constructor, private and public variables, and function prototypes",5.0,2.5,3.75,0.9853630556545834
1888,11.1,"Data variables and Functions, Data members",5.0,5.0,5.0,0.998025530645003
1889,11.1,class definitions include the name of the class and type of parameters,1.5,3.75,2.625,0.9879937540560202
1890,11.1,"class variables, class function prototypes",5.0,3.75,4.375,0.987218989599699
1891,11.1,input  & return type elements,1.5,3.0,2.25,0.990937557517292
1892,11.2,Public and private specifiers.,5.0,5.0,5.0,0.9912217980287015
1893,11.2,"Public, Private, Restricted",4.5,4.75,4.625,0.9788153926321589
1894,11.2,The access specifiers are public and private.,5.0,5.0,5.0,0.9896643388079341
1895,11.2,public private protected,5.0,4.75,4.875,0.9857390907107123
1896,11.2,Public or Private.,5.0,5.0,5.0,0.9913713240376696
1897,11.2,public: the function or variable can be used outside the class private: the function or variable can only be used with the class,5.0,5.0,5.0,0.9771871518214961
1898,11.2,Public and Private,5.0,5.0,5.0,0.9919989771775075
1899,11.2,public private and protected,5.0,4.75,4.875,0.9907225506252427
1900,11.2,Public Private,5.0,5.0,5.0,0.9866676225559803
1901,11.2,"Private, public, protected",5.0,4.75,4.875,0.9890142456723192
1902,11.2,The access-specifiers that can be used in a C++ class definition is private and public.,5.0,5.0,5.0,0.9843786141275849
1903,11.2,public and private.,5.0,5.0,5.0,0.9899964144006694
1904,11.2,"static, long, unsigned",0.0,1.25,0.625,0.9851114994323713
1905,11.2,"Private, Public, Protected, or Friend.",5.0,4.75,4.875,0.9760952365000423
1906,11.2,"A C++ class definition may include access-specifiers public, private, and static.",4.0,5.0,4.5,0.9829027755631372
1907,11.2,"local, global, local-variable, function specific",1.5,2.5,2.0,0.9774197538524585
1908,11.2,"public, private",5.0,5.0,5.0,0.9847333544690045
1909,11.2,"Public, protected, and private.",5.0,4.75,4.875,0.9775682868134785
1910,11.2,"private, public",5.0,5.0,5.0,0.9922712068659482
1911,11.2,public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls,5.0,5.0,5.0,0.9721474148729252
1912,11.2,"public , private, protected",5.0,5.0,5.0,0.9813998718568764
1913,11.2,public and private,5.0,5.0,5.0,0.9886446031152711
1914,11.2,"public, private, protected",5.0,4.75,4.875,0.9813998718568764
1915,11.2,"functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.",5.0,4.75,4.875,0.9741431921352717
1916,11.2,data member or data functions are access specifiers,0.0,1.25,0.625,0.9852568272957175
1917,11.2,public or private,5.0,5.0,5.0,0.9868398321078478
1918,11.2,public and private,5.0,5.0,5.0,0.9886446031152711
1919,11.2,public and private,5.0,5.0,5.0,0.9886446031152711
1920,11.2,"public - can be accessed from outside the class private - accessible only from inside the class, not inherited protected - accessible only from inside the class, inherited",5.0,4.75,4.875,0.9645566271461011
1921,11.2,public private protected,5.0,5.0,5.0,0.9857390907107123
1922,11.3,ie. GradeBook myGradeBook();  call upon the class and then give it a name like shown,0.0,2.5,1.25,0.9798616713495102
1923,11.3,They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.,3.0,3.75,3.375,0.9897286727460904
1924,11.3,not answered,0.0,0.0,0.0,0.9741811535338363
1925,11.3,Objects are initialized by a value given.  When an object is defined for a certain task.  ,2.0,2.5,2.25,0.9929370953998944
1926,11.3,"They are initialized with a "" . "" (dot) between the constructor and the object being created.",0.0,4.5,2.25,0.9874997816156199
1927,11.3,objectname classname();  to call a function from the class:  objectname.funciton();,0.0,2.5,1.25,0.9834580015856771
1928,11.3,"If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.",5.0,5.0,5.0,0.9724604579013866
1929,11.3,classname objectname(input parameters);,3.0,2.5,2.75,0.9951806877967269
1930,11.3,When the class is called by the Constructor,2.0,5.0,3.5,0.9846582229772525
1931,11.3,"Constructors; default when not provided by user, or programmer specified constructors.",5.0,5.0,5.0,0.9860469105548039
1932,11.3,Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.,1.0,3.75,2.375,0.9895444660319955
1933,11.3,"&lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;",1.0,3.75,2.375,0.9656316717234997
1934,11.3,"variables are set to a given value, or 0 if none is given.",1.0,1.25,1.125,0.9874105309973754
1935,11.3,"When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).",5.0,5.0,5.0,0.9814232493115886
1936,11.3,"Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.",2.0,3.0,2.5,0.9918342827697054
1937,11.3,"If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.  Gradebook myGradebook;  In this bit of code, the class Gradebook has been initialized as object myGradebook.",5.0,5.0,5.0,0.971708193754728
1938,11.3,objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.,3.0,3.75,3.375,0.985263634031979
1939,11.3,They are initialized with a constructor.,5.0,5.0,5.0,0.9937427351778028
1940,11.3,"The value is specified after declaration,  It can initialized anywhere between the declaration and the corresponding }.",1.0,3.75,2.375,0.9906101673116265
1941,11.3,"with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.",4.0,5.0,4.5,0.9866014682239306
1942,11.3,initialized using the same name as the class,1.0,4.0,2.5,0.9934981296456844
1943,11.3,they are initialized to a value dependent on the compiler,1.0,1.25,1.125,0.9894723734321137
1944,11.3,memory is allocated in accordance with their type and initialization input.,1.0,2.5,1.75,0.9907432168215238
1945,11.3,Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.,1.0,1.25,1.125,0.988046874777385
1946,11.3,using constructor,5.0,5.0,5.0,0.9968992843823203
1947,11.3,by giving them a value,2.0,1.25,1.625,0.990264082543925
1948,11.3,"By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)",5.0,5.0,5.0,0.980543804244535
1949,11.3,"objects are initialized by giving the object a type, name, and initial value",1.0,3.75,2.375,0.9899432430917791
1950,11.3,they are initialized to 0,1.0,1.25,1.125,0.9877753973449922
1951,11.3,"obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. ",1.0,3.75,2.375,0.9847494877427618
1952,11.4,"Name of the function, parameters it must receive in order to perform and a return type.",5.0,5.0,5.0,0.9949791250809832
1953,11.4,a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.,3.5,4.0,3.75,0.9901012747393682
1954,11.4,"A function signature is the return type of a function, its name, and the number and type of its parameters.",5.0,5.0,5.0,0.9903114901444267
1955,11.4,function prototype that contains functions and data members.,1.0,5.0,3.0,0.989450819601577
1956,11.4,A function signature is a declaration of the function that includes the parameter types and the number of parameters.,5.0,5.0,5.0,0.9903384529663556
1957,11.4,the declaration of the function.,2.0,3.0,2.5,0.9944233389329467
1958,11.4,"Includes the name, accepted parameters, and return type.",5.0,5.0,5.0,0.9955399316171215
1959,11.4,its return type and its input parameters,5.0,5.0,5.0,0.9876046169645553
1960,11.4,Contains the function name and its paramaters.  The return type is not included,5.0,5.0,5.0,0.9951063140857872
1961,11.4,"Return type, function name, and the parameter types",5.0,5.0,5.0,0.9875567089204461
1962,11.4,The function signature tells what the function parameters and includes all the function calls,2.5,5.0,3.75,0.9904689545963176
1963,11.4,"The function's name, as well as what it returns and what it accepts.",5.0,5.0,5.0,0.9925982902235896
1964,11.4,the body of the function that holds all the actual code,1.0,2.5,1.75,0.9913226511193035
1965,11.4,A function signature is the return type and accepted pass value type it takes,3.0,4.0,3.5,0.9885298019504326
1966,11.4,A function signature specifies the name and input variables of a function.,5.0,5.0,5.0,0.9922238052452883
1967,11.4,A function signature is the function's parameters and their type and the name of the function.  The return type is not a part of the function signature.,5.0,5.0,5.0,0.9919196537671684
1968,11.4,the name of the function and what it accepts/ returns,5.0,5.0,5.0,0.993637579609096
1969,11.4,"the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.",5.0,4.0,4.5,0.9930211427965311
1970,11.4,"The order, number, and type of data items included inside the function parameters.",4.5,5.0,4.75,0.9791604744483253
1971,11.4,"its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.",5.0,5.0,5.0,0.9895968881772285
1972,11.4,"is the name of the fuction, return type, and parameters that are being used",5.0,5.0,5.0,0.9965944153882196
1973,11.4,"a function signature should include the name of the function, parameters, and a body.",2.5,5.0,3.75,0.9933451360874891
1974,11.4,the name of the function and the arguments passed to that function,5.0,5.0,5.0,0.9943732861644508
1975,11.4,"A function signature, used in a function's prototype, is the set of object types it take in as parameters, with or without names given for the objects.",5.0,5.0,5.0,0.9768296325107769
1976,11.4,function name and parameter are called function signature.,5.0,5.0,5.0,0.9954677577093243
1977,11.4,fuction name and parameters,5.0,5.0,5.0,0.9898461928616322
1978,11.4,"The parameters needed, the return type, and name of the function.",5.0,5.0,5.0,0.9863522623041449
1979,11.4,"the signature of a function includes the name of the function, the number and types of parameters, and the return type",5.0,5.0,5.0,0.9976477491441306
1980,11.4,"It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.",4.5,5.0,4.75,0.989805356708716
1981,11.4,"function sig is, is what is the class recognizes as the main function, or rather its specification ",0.0,3.75,1.875,0.9865799339340088
1982,11.5,A function that calls upon it self to solve a problem.  Each time it calls upon it self it splits up a problem into a simplier form until it reaches a 'base case' which is the most simplest form of the problem.,5.0,5.0,5.0,0.9911668095825291
1983,11.5,A function that calls itself to perform an opperation such as a factorial recursive function.,5.0,5.0,5.0,0.9975421009328943
1984,11.5,not answered,0.0,0.0,0.0,0.9741811535338363
1985,11.5,A base case that calls upon itself until the problem becomes smaller and terminates.,2.5,5.0,3.75,0.9956252823387379
1986,11.5,It's a function that calls itself. It runs multiple times until the base case is reached.,5.0,5.0,5.0,0.996625769727331
1987,11.5,a function that calls itself untill it reaches a base case.,5.0,5.0,5.0,0.9974055860579683
1988,11.5,"A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.",5.0,5.0,5.0,0.9876022472459388
1989,11.5,a function that calls itself until a base case is met,5.0,5.0,5.0,0.9971219874005958
1990,11.5,A function that calls itself. With each function call the problem is diminished.,5.0,5.0,5.0,0.9983269390044706
1991,11.5,A function that calls itself to perform a certain task,5.0,5.0,5.0,0.9979555199757275
1992,11.5,A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.,5.0,5.0,5.0,0.9948375865343345
1993,11.5,"A function that calls itself, in order to solve a problem.",5.0,5.0,5.0,0.9948344463587422
1994,11.5,"a function that calls itself over and over until it finds the simplest form of solution, or the base case.",5.0,5.0,5.0,0.9928926305028694
1995,11.5,"A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.",5.0,5.0,5.0,0.9941030731687664
1996,11.5,"A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.",5.0,5.0,5.0,0.9913366115949942
1997,11.5,"A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached.  At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.",5.0,4.0,4.5,0.9878674318865769
1998,11.5,a function that calls itself into a loop with a base case for a loop exit.,2.5,5.0,3.75,0.996049656991392
1999,11.5,a function that calls itself until the base cases are met.,5.0,5.0,5.0,0.9974266593617884
2000,11.5,A recursive function only knows how to solve base cases  A recursive function calls itself directly or indirectly until a base case is reached.,5.0,5.0,5.0,0.9931539825591428
2001,11.5,a function that calls on itself and uses a base case to stop the recursion,5.0,5.0,5.0,0.9954706698598853
2002,11.5,"a function that calls itself, and which eaach calls get closer and close to the base case.",5.0,5.0,5.0,0.992653824548806
2003,11.5,A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.,5.0,5.0,5.0,0.9945147456342424
2004,11.5,a function that calls itself in the definition code,5.0,5.0,5.0,0.9972449420930994
2005,11.5,A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.,5.0,5.0,5.0,0.9931632552097813
2006,11.5,"It invoke by itself again ana again, unless it reach bas case",4.0,5.0,4.5,0.992379930642617
2007,11.5,"a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.",5.0,5.0,5.0,0.9891664631266225
2008,11.5,"A function that calls itself over and over again till a base case is reached, then it returns back to the original function.",5.0,5.0,5.0,0.9917849005292381
2009,11.5,"a recursive function is a function that during execution, calls itself over and over until a base case is reached",5.0,5.0,5.0,0.9924918273909378
2010,11.5,A function that calls itself. Usually used to split a problem into several smaller problems of the same type.,5.0,5.0,5.0,0.9972014525285458
2011,11.5,function that calls it self till the base case is met ,5.0,5.0,5.0,0.9954416799336394
2012,11.6,"Iteration, performers  a series of checks and loops.",5.0,5.0,5.0,0.987406397575818
2013,11.6,The alternative method is to use loops in the program instead of a function which calls itself. ,5.0,2.5,3.75,0.9922560275688999
2014,11.6,An alternative to solving a problem using recursive functions is to solve the problem using iteration.,5.0,5.0,5.0,0.9927483351822475
2015,11.6,"Iteration, this would be more efficient and has repetition structure.",5.0,5.0,5.0,0.9865039262252319
2016,11.6,One can use iteration or by using a simple while/for loop.,5.0,5.0,5.0,0.9936085485960913
2017,11.6,iteration,5.0,5.0,5.0,0.9806875159845175
2018,11.6,"Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.",5.0,5.0,5.0,0.9887706571173328
2019,11.6,you can also solve the problem iteratively,5.0,5.0,5.0,0.9906417881746326
2020,11.6,iterative,5.0,5.0,5.0,0.9806875159845175
2021,11.6,Using iteration loops.,5.0,5.0,5.0,0.9989684845752267
2022,11.6,Another alternative way to solve a problem instead of using recursive functions is by using iteration.,5.0,5.0,5.0,0.992385632726536
2023,11.6,"A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.",5.0,5.0,5.0,0.9897701951394592
2024,11.6,iteration,5.0,5.0,5.0,0.9806875159845175
2025,11.6,Any recursive function can be solved using an iterative method.,5.0,5.0,5.0,0.99571951796813
2026,11.6,"Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.",5.0,3.0,4.0,0.9892410457403359
2027,11.6,"Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.  ",5.0,5.0,5.0,0.9872057008420682
2028,11.6,iteratively,5.0,5.0,5.0,0.9806875159845175
2029,11.6,using an Iterative calls,5.0,5.0,5.0,0.9941884775317675
2030,11.6,Iteration.,5.0,5.0,5.0,0.9930104673014795
2031,11.6,iteration is the alternative way to solve a problem,5.0,5.0,5.0,0.9918922740668239
2032,11.6,using an iterative solution instead,5.0,5.0,5.0,0.9955803441462375
2033,11.6,"Using an iterative solution.  For, while, or do while loop.",5.0,5.0,5.0,0.9923567541179077
2034,11.6,the alternative way to solve a problem that could be solved using recursion is iteration.,5.0,5.0,5.0,0.9920873648665133
2035,11.6,"Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem. ",5.0,5.0,5.0,0.9878783170027566
2036,11.6,by iteration,5.0,5.0,5.0,0.9872516307137572
2037,11.6,"itteration, like a for loop, a while loop, or a do while loop",5.0,5.0,5.0,0.9789830302876197
2038,11.6,Iteration by using loops,5.0,5.0,5.0,0.9938732216009875
2039,11.6,iterative functions,5.0,5.0,5.0,0.9979799792449989
2040,11.6,iteration,5.0,5.0,5.0,0.9806875159845175
2041,11.6,"the alt, way is to use a functions parameter in a call ""to"" function. ",2.5,2.5,2.5,0.9847320563797416
2042,11.7,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again.  An array that is not declared static will keep its original elements.,5.0,4.5,4.75,0.9959953307800429
2043,11.7,A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.,2.0,3.75,2.875,0.9956435777894354
2044,11.7,Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.,5.0,5.0,5.0,0.9967842152804702
2045,11.7,Static can be initialized and non-static cannot in C++.,1.0,4.0,2.5,0.9919724610325669
2046,11.7,An array declared static remains the same throughout the execution of the program.,0.5,4.0,2.25,0.9968235118015424
2047,11.7,a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.,3.5,5.0,4.25,0.9963381294347585
2048,11.7,"The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???",3.5,3.75,3.625,0.9918671085288489
2049,11.7,a static array has a predetermined size and that size cannot be altered,2.0,3.75,2.875,0.996119290879593
2050,11.7,Arrays declared static can not be changed.  One not declared static can be altered.,0.5,3.75,2.125,0.995757804030143
2051,11.7,"an array that is declared as static will retain the values stored in it's elements between function calls, and will not reinitialize them to default values.",5.0,4.0,4.5,0.9917863832558831
2052,11.7,An array that is declared static causes anything that is not initialized to be set to 0.,1.0,3.75,2.375,0.9969741103062945
2053,11.7,A static array will have a null character at the end of the array.,2.5,2.5,2.5,0.9969541532789689
2054,11.7,static arrays cannot be changed while normal arrays can be changed,0.5,3.75,2.125,0.9953631571930227
2055,11.7,An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.,3.0,3.0,3.0,0.9947123561300769
2056,11.7,"A static array has class scope, allowing it to remain where other arrays might be recycled.",5.0,3.25,4.125,0.9928609512821202
2057,11.7,An array that is static does not change or uninitialize if called later unless explicitly acted upon.  It does not terminate or change across objects.  An automatic local array will be cleared and uninitialized if called later outside of it's specific scope.,5.0,4.5,4.75,0.9931385933273827
2058,11.7,"one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.",2.0,3.75,2.875,0.994136555587242
2059,11.7,"a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.",5.0,5.0,5.0,0.9925294446499038
2060,11.7,A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.,5.0,3.75,4.375,0.9957716036206741
2061,11.7,"a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.",5.0,4.0,4.5,0.992846510701652
2062,11.7,an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.,0.5,4.0,2.25,0.9944413046769272
2063,11.7,Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.,0.5,3.75,2.125,0.9938258024507012
2064,11.7,the data of a static array cannot be changed,0.5,3.75,2.125,0.9933521108517127
2065,11.7,"Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it's parent function terminates, leaving it available for other functions (or new instances of the original function).",5.0,2.5,3.75,0.994147647753701
2066,11.7,by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.,4.0,4.5,4.25,0.9941774625805377
2067,11.7,static arrays can be called from anywhere,3.0,1.25,2.125,0.99370842975208
2068,11.7,A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.,0.5,3.75,2.125,0.9970125265816709
2069,11.7,"a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function",3.0,3.75,3.375,0.9911513374311274
2070,11.7,"An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.",5.0,3.75,4.375,0.9857621133486524
2071,11.7,static has a predetermined size that cannot be passed while vis versa. ,2.0,3.75,2.875,0.9954639717168813
2072,11.8,the type char[] has a  null ('\n' ) element at the very end.,5.0,5.0,5.0,0.9926447766598683
2073,11.8,a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.,0.0,3.75,1.875,0.9863844577224812
2074,11.8,The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.,5.0,5.0,5.0,0.9870691293186569
2075,11.8,String of characters are followed by a null statement.  type string is for example   string s;,5.0,5.0,5.0,0.9900572216516003
2076,11.8,String contains a word where as char can contain phrases or a string of characters.,0.0,3.75,1.875,0.9898715891774541
2077,11.8,a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].,0.0,4.0,2.0,0.9877699878496424
2078,11.8,"A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.",5.0,2.5,3.75,0.9889523559425062
2079,11.8,an array of characters stores a null character at the end,5.0,5.0,5.0,0.9910642681292307
2080,11.8,"When you read a string of characters, you also read in the white space.  When you read characters declared char you only read the characters, no white space.",1.5,4.0,2.75,0.9814381965975578
2081,11.8,"Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.",1.5,5.0,3.25,0.9906806752018005
2082,11.8,The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.,0.0,3.75,1.875,0.9856057033891508
2083,11.8,"An array of strings reads the string literals, meaning anything within ""quotes"". A char array reads a string as each individual character.",0.0,3.75,1.875,0.9862058695024546
2084,11.8,character arrays can call on individual letters were a string array can only call words.,0.0,3.75,1.875,0.9880080148958951
2085,11.8,The character array has an end of line character at the end of it.,4.5,5.0,4.75,0.9900199926327997
2086,11.8,"Type char[] may contain a null value as the last element, whereas type string will not.",5.0,5.0,5.0,0.997713959805588
2087,11.8,The variable of type string has a terminating character \0 at the end of it.,2.5,5.0,3.75,0.9903309947213804
2088,11.8,the one that is type string has an extra string member. The /0 at the end. ,2.5,5.0,3.75,0.9853203816537864
2089,11.8,"a string has variable size and function calls available, while an character array usually has a static size.",2.5,4.0,3.25,0.9899131391084051
2090,11.8,a string char[] adds a null value to the end of the string.,5.0,5.0,5.0,0.996217347167404
2091,11.8,"char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.",5.0,5.0,5.0,0.9901013391331311
2092,11.8,"the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.",0.0,4.0,2.0,0.9880778445841961
2093,11.8,"When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.",0.0,4.0,2.0,0.9892939410953725
2094,11.8,"a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only",0.0,3.75,1.875,0.9879291127299195
2095,11.8,"A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.",1.5,3.75,2.625,0.9875285457667253
2096,11.8,"In arrays strings are stored as a characters (char[]), each character of string will be stored in each memory location of the array, while string of characters is only one memory location.",0.0,3.75,1.875,0.9863398863306787
2097,11.8,"an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string",5.0,5.0,5.0,0.9889561147449856
2098,11.8,A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\0'),5.0,5.0,5.0,0.9872656759796248
2099,11.8,a string of characters will have a null character or value at the end of the string,5.0,5.0,5.0,0.9913734658068837
2100,11.8,"when the characters are put in a char array, there is also a null terminating character added to the end, '\0'",5.0,5.0,5.0,0.9921759416013998
2101,11.8,"string of characters that is read into a variable of type string includes, ",0.0,3.0,1.5,0.9894712905478374
2102,11.9,"For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself",3.0,4.5,3.75,0.9940453965527257
2103,11.9,Divide and coquer means dividing a problem into 2+ problems which are solved and then merged  back together for a final solution to the whole problem.,5.0,5.0,5.0,0.9900320084005665
2104,11.9,The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.,4.0,4.5,4.25,0.9891291224050294
2105,11.9,"Divide elements,recur then conquer, which works in merge sort and quicksort.",3.0,4.5,3.75,0.9949813610654386
2106,11.9,"To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.",4.0,4.5,4.25,0.9878895719860403
2107,11.9,to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.,2.0,5.0,3.5,0.985564901107273
2108,11.9,"Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.",4.0,4.5,4.25,0.9955551431825673
2109,11.9,dived and conquer is the breaking up of a large complex program into small easy to solve components.,4.0,4.5,4.25,0.9812804860463286
2110,11.9,Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.,4.0,4.5,4.25,0.9907025159504093
2111,11.9,"Break up very large data structures into smaller sub-units, that are easier to manipulate.",4.0,4.5,4.25,0.9931761354558057
2112,11.9,The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.,4.0,4.25,4.125,0.9859358162128592
2113,11.9,"The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. ",4.0,4.5,4.25,0.9935255374357471
2114,11.9,"Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.",4.5,4.5,4.5,0.9947214398990512
2115,11.9,The idea is to split the problem into half and solve for the smaller split-problems. ,4.0,4.5,4.25,0.985136212606711
2116,11.9,"The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.",5.0,5.0,5.0,0.9954965587559256
2117,11.9,"Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.",4.0,4.5,4.25,0.9929456405278305
2118,11.9,"It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. ",4.0,4.5,4.25,0.99460429540592
2119,11.9,it is the taking of a larger problem and splitting it into simpler smaller problems.,4.0,4.5,4.25,0.9859757905600134
2120,11.9,It divides the problem into singular units and works on the problem piece by piece until the problem is solved.,4.0,4.5,4.25,0.9893569381645287
2121,11.9,"smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.",5.0,5.0,5.0,0.9874474900391373
2122,11.9,"a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.",4.0,4.5,4.25,0.9951951954159968
2123,11.9,"The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.",4.0,4.5,4.25,0.9929999230918848
2124,11.9,the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.,4.0,4.5,4.25,0.9843677340710664
2125,11.9,"dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.",5.0,5.0,5.0,0.9953514872072942
2126,11.9,"Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n/2 elements",5.0,5.0,5.0,0.9798292009012829
2127,11.9,"divide the array in half, sort each half, then sort them back in one array",3.0,3.0,3.0,0.9832904529014106
2128,11.9,You take a class and break down everything it is supposed to do into easily managed functions.,1.0,4.5,2.75,0.9806241336363699
2129,11.9,"this is shown by the use of .cpp and header files.  by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file",1.0,4.5,2.75,0.9833911454493287
2130,11.9,"When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.",5.0,4.5,4.75,0.9849901536340097
2131,11.9,it is the separating of large program into smaller classes then until target is reached.  ,1.5,5.0,3.25,0.9867719238888996
2132,11.11,"It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique",5.0,5.0,5.0,0.9932573049903967
2133,11.11,A merge sort works by removing all items to sepperate memory locations and merging them back together in order.,2.0,5.0,3.5,0.9886921194928554
2134,11.11,"It divides the array into two halves, sorts each half, then merges the two halves together.",5.0,5.0,5.0,0.9988851541826634
2135,11.11,"Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. ",5.0,5.0,5.0,0.9942174253519102
2136,11.11,"Merge sort uses the ""divide and conquer"" idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.",5.0,5.0,5.0,0.9899827701110243
2137,11.11,divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.,5.0,5.0,5.0,0.9816691923142352
2138,11.11,"Continually split array in half, sort each side of the halves, then put them back together once organized.",5.0,5.0,5.0,0.9926890245785533
2139,11.11,merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.,5.0,5.0,5.0,0.9915241440603139
2140,11.11,By divide and conquer.,1.5,5.0,3.25,0.9777750382479397
2141,11.11,"Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.",5.0,5.0,5.0,0.9920040509986047
2142,11.11,"Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it ""merges"" back as it keeps on sorting the algorithm as it does so.",5.0,5.0,5.0,0.9931938892526935
2143,11.11,"Merge sort divides the problem in half, organizes each half, then brings the two halves together again.",5.0,5.0,5.0,0.9959568286608259
2144,11.11,"Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.",5.0,5.0,5.0,0.9935711091717108
2145,11.11,"A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.",5.0,5.0,5.0,0.9954110868347512
2146,11.11,"Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.",5.0,5.0,5.0,0.9959799176819023
2147,11.11,Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.,5.0,5.0,5.0,0.9892115781296993
2148,11.11,"It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. ",5.0,5.0,5.0,0.992167628461548
2149,11.11,"it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.",5.0,5.0,5.0,0.9920261613560877
2150,11.11,Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.,5.0,5.0,5.0,0.992174601069112
2151,11.11,"merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.",5.0,5.0,5.0,0.9936079927405762
2152,11.11,"Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. ",5.0,5.0,5.0,0.9967115188674279
2153,11.11,"Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.",5.0,5.0,5.0,0.9977279767280292
2154,11.11,merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,5.0,5.0,5.0,0.991322827840418
2155,11.11,"merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.",5.0,5.0,5.0,0.9942992503578831
2156,11.11,"Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.",5.0,5.0,5.0,0.9946689289549698
2157,11.11,"divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.",5.0,5.0,5.0,0.9890257339406977
2158,11.11,Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.,5.0,5.0,5.0,0.9883044491840339
2159,11.11,"merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array",5.0,5.0,5.0,0.9961060628367299
2160,11.11,"the merge sort continually divides the array (or set of containers) into halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrays (containers).",5.0,5.0,5.0,0.9943546370852852
2161,11.11,merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.,2.5,5.0,3.75,0.9888495560355005
2162,12.1,A variable in memory that hold the address of another memory location to which it points too,5.0,5.0,5.0,0.9952692841968763
2163,12.1,A pointer is a variable that contains the memory address of a given value.,4.5,5.0,4.75,0.9956790872439635
2164,12.1,A pointer is a variable that stores the address of another variable.,5.0,5.0,5.0,0.9960484864554402
2165,12.1,A pointer is a variable that holds a memory address or location of another variable.,5.0,5.0,5.0,0.9960078617603939
2166,12.1,A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.,5.0,5.0,5.0,0.9923402713534527
2167,12.1,a pointer points to a location in memory of a certain data type,4.5,5.0,4.75,0.9969339429068541
2168,12.1,A pointer is a variable that points to the address location of another variable.  Represented by (*).,5.0,5.0,5.0,0.9947538112408209
2169,12.1,A pointer is a variable that holds the address of a given variable (and of a given data type),5.0,5.0,5.0,0.9938908012222374
2170,12.1,pointer is a programming data type whose value points to another value stored in computer memory by its address.,5.0,5.0,5.0,0.9923951216212467
2171,12.1,A data type that points to a specific memory address.,5.0,5.0,5.0,0.9938721116606574
2172,12.1,Its like a variable except it only holds the address in memory of the variable not the physical information.,5.0,5.0,5.0,0.9932017242894244
2173,12.1,a pointer is a reference to a memory location. ,5.0,5.0,5.0,0.9950641334778164
2174,12.1,A pointer is an alias to an object in memory.,3.5,4.25,3.875,0.9968055368711957
2175,12.1,"A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.",5.0,5.0,5.0,0.9931413208595065
2176,12.1,its a data type with a memory address and a value,1.5,5.0,3.25,0.9947866746076597
2177,12.1,a form of storing data that keeps the location in memory of an data type or object.,5.0,5.0,5.0,0.9943625032188508
2178,12.1,it contains a object's memory address,5.0,5.0,5.0,0.9958635854014831
2179,12.1,variable that contains the memory address of a data object.,5.0,5.0,5.0,0.9946442274764825
2180,12.1,A pointer is an element that references a memory location.,5.0,5.0,5.0,0.9964853558947124
2181,12.1,"an object that points to a specific place in memory, where a variable or value is stored.",5.0,5.0,5.0,0.990924828078093
2182,12.1,a variable that stores the address of a memory location,5.0,5.0,5.0,0.9954856532413288
2183,12.1,"A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.",5.0,5.0,5.0,0.9900378078444361
2184,12.1,Pointer is a variable which have a memory address of a variable.,5.0,5.0,5.0,0.9956661849382817
2185,12.1,a pointer points to a location in memory where data is stored,5.0,5.0,5.0,0.9969130608963706
2186,12.1,a variable that holds the address of another variable and can access the contents of the variable. ,5.0,5.0,5.0,0.9923640430166211
2187,12.1,a pointer is a memory address that points to a data member,5.0,5.0,5.0,0.9955208785989682
2188,12.1,A data type that stores the memory address of another variable.,5.0,5.0,5.0,0.9897490146267368
2189,12.1,its like a variable but only holds an address in meomrry not the physical address. ,1.0,5.0,3.0,0.9910816830021246
2190,12.2,"Try several sets of data on an algorithm that includes worst case, best case, and random cases.  Also try and run the same program on a different computer with the same specs",5.0,3.75,4.375,0.9858389904472201
2191,12.2,not answered,0.0,0.0,0.0,0.9741811535338363
2192,12.2,time complexity using big O  logarthmic O(log n) linear O(n) exponential O(n^2) quadratic O(n^k) k&gt;=1 Polynomial O(a^n) n&gt;1 ,1.5,3.0,2.25,0.9743204298753033
2193,12.2,Using some sort of counting principle of the number of operations performed in an algorithm.,5.0,3.75,4.375,0.9942794705712696
2194,12.2,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.,5.0,5.0,5.0,0.9949750342912312
2195,12.2,measuring the relationship of running an algorithm with different input sizes.,5.0,3.75,4.375,0.9972594569902291
2196,12.2,"Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime.  This is not recommended because it is a limited test.  It does not include all possibilities of the data, nor the hardware used to process the data.",5.0,4.25,4.625,0.9886634324804398
2197,12.2,not answered,0.0,0.0,0.0,0.9741811535338363
2198,12.2,The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.,1.5,3.75,2.625,0.9958570385135841
2199,12.2,"You create and run  the algorithm multiple times, while measuring the amount of time it takes, you then average the results.",5.0,5.0,5.0,0.9909887295908774
2200,12.2,keep a value of how many operations it takes and add to this value each time a function is called.,3.0,3.75,3.375,0.9947858819636229
2201,12.2,BIG-OH,1.5,3.0,2.25,0.9679302923978382
2202,12.2,Running the program with various input data and measuring the running time with system time.,5.0,5.0,5.0,0.9969122205043033
2203,12.2,"You run a program with different data sizes, like 10^x.  As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time.  It's very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.",5.0,3.0,4.0,0.9882037473424319
2204,12.2,to run the program through and see how many times each thing is called and the runtime of each function is based on that.,5.0,3.5,4.25,0.9928156540657478
2205,12.2,the number of times a specific segments get called per unit work.,3.0,3.0,3.0,0.9941319479032589
2206,12.2,"For every call into memory, add/ multiply it into an equation of type O(n)",1.5,3.0,2.25,0.9889091926697552
2207,12.2,"adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.",3.0,4.25,3.625,0.9940549336149169
2208,12.2,Big O(h) notation,1.5,3.0,2.25,0.9891846118482389
2209,12.2,the experimental approach measures actual running time in t.  t= seconds.,5.0,5.0,5.0,0.9938349877455147
2210,12.2,running an algorithm on a specific set of data,5.0,3.0,4.0,0.9911220053419266
2211,12.2,"In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.",2.5,3.75,3.125,0.9889177080388113
2212,12.2,"run the code for n-times and get average values, drop the constant and lowest number. for example if             f(x) = 3n +1 the running time will bef  f(x) = O(n)",2.5,4.5,3.5,0.985508528192552
2213,12.2,to measure the actual time of the program to run. and calculate the running time using the input and operations done,5.0,5.0,5.0,0.9927920544388555
2214,12.2,adding up the number of operations performed based on the worst case possible.,2.0,3.0,2.5,0.9951273242803645
2215,12.2,the experimental approach would be to run through the algorithm and see how long it takes,5.0,5.0,5.0,0.9934977457345726
2216,12.2,"trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.",5.0,5.0,5.0,0.9916689321877724
2217,12.2,running the input with various inputs measuring the running time with  system time ,5.0,3.75,4.375,0.9968961383728914
2246,12.4,"it scans the list and selects the smallest(largest) element and places it in the front, increment the curPtr by one, scan the list again for the next smallest(largest) element and place it in with respect with the other sorted elements.",5.0,5.0,5.0,0.9913563213045155
2247,12.4,"Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.",5.0,5.0,5.0,0.9960528589972456
2248,12.4,Compare the largest element to the front element and swap data according to value if needed.,4.0,3.75,3.875,0.9914369966549801
2249,12.4,"Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.",1.0,3.0,2.0,0.9940667734890829
2250,12.4,"Iterate through the list (assume list of integers), find the smallest one, and put it in a separate ""sorted"" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.",5.0,4.5,4.75,0.9848913137028504
2251,12.4,selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.,5.0,5.0,5.0,0.9932706224142923
2252,12.4,You select the smallest element and place it on the left.  You select the smallest element and sort it with respect the the item already on the left.  You continue this till the end of the collection of items.,5.0,5.0,5.0,0.9950954372944552
2253,12.4,"A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.",5.0,5.0,5.0,0.992310195641191
2254,12.4,Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.,0.0,3.75,1.875,0.9936280992109868
2255,12.4,"Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.",1.0,4.0,2.5,0.9953393351335506
2256,12.4,"goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.",0.0,3.75,1.875,0.9855401643971831
2257,12.4,selection sort finds the lowest element in the data set and places it behind the pivot point.,5.0,3.75,4.375,0.9939258187204231
2258,12.4,"Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.",5.0,3.75,4.375,0.9952353762908547
2259,12.4,"Selection sort traverses an unsorted array looking for the smallest value, when it's found it is put at the beginning of the unsorted array.  Performed several times, this will output a sorted array.",5.0,5.0,5.0,0.9971216127931803
2260,12.4,it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position,5.0,3.75,4.375,0.9918823027259931
2261,12.4,"pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.",1.0,5.0,3.0,0.9898496956077072
2262,12.4,It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.,5.0,3.75,4.375,0.9947567797482141
2263,12.4,"by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two.  then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them.  it does this while decreasing the range it looks at until it finishes in the middle.",1.0,3.75,2.375,0.9929689303560189
2264,12.4,"Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.",5.0,3.75,4.375,0.9932817348081525
2265,12.4,"selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.",1.0,3.75,2.375,0.9929983262027918
2266,12.4,selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,5.0,3.75,4.375,0.9938852841925003
2267,12.4,"Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.",5.0,5.0,5.0,0.9960469258352793
2268,12.4,"select an element compare it with 2nd element if it is greater, swap it ",1.0,4.5,2.75,0.9923154759684332
2269,12.4,"it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...",5.0,4.25,4.625,0.9968841398807335
2270,12.4,It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.,5.0,4.25,4.625,0.9942312908314788
2271,12.4,"selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc",1.0,5.0,3.0,0.9938752808986032
2272,12.4,"it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.",5.0,3.0,4.0,0.9872410210314053
2273,12.4,selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it. ,5.0,3.0,4.0,0.9912739261794071
2274,12.5,A link list can grow to a infinite size as a array has a fixes size.,5.0,5.0,5.0,0.9929659419305165
2275,12.5,The advantage of linked lists is that they are not limited in size like arrays.,5.0,5.0,5.0,0.9929270248091213
2276,12.5,link lists dont have a fixed size,5.0,5.0,5.0,0.9916765108428985
2277,12.5,"Linked Lists can be of variable size, where arrays have fixed size.",5.0,5.0,5.0,0.9940768381774102
2278,12.5,"Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.",5.0,5.0,5.0,0.9931612649762968
2279,12.5,"a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.",5.0,5.0,5.0,0.9906056704028374
2280,12.5,You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.,5.0,5.0,5.0,0.9902693218340596
2281,12.5,The main advantage to a linked list is that it can have it's size adjusted during runtime.,5.0,5.0,5.0,0.9923711698352906
2282,12.5,Linked lists are able to grow in size. So elements can be added to the list.,5.0,5.0,5.0,0.9949149504286265
2283,12.5,"Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.",4.5,5.0,4.75,0.9948620021027788
2284,12.5,There is no predetermined length,5.0,5.0,5.0,0.9854691327007916
2285,12.5,"Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.",4.0,5.0,4.5,0.9922785322326981
2286,12.5,Linked lists may be dynamically grown.,5.0,5.0,5.0,0.9918471713688921
2287,12.5,"Linked lists are very dynamic in that they can change and be added/subtracted to very easily because they are not linear in memory.   Arrays are pre-specified in size to be cast over a certain amount of disk space.  This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input.  Linked Lists do not run into these problems.",5.0,5.0,5.0,0.9904472070140632
2288,12.5,"linked lists have an indefinite size, whereas arrays are a specific size.",5.0,5.0,5.0,0.995371292882931
2289,12.5,"Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.",5.0,5.0,5.0,0.9967286373082094
2290,12.5,"They grow dynamically, unlike the fixed size array",5.0,5.0,5.0,0.9935550229846952
2291,12.5,"you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room",5.0,5.0,5.0,0.9909029212854078
2292,12.5,Linkded list does not have a fixed size. Arrays have a fixed size.,5.0,5.0,5.0,0.9917981295127477
2293,12.5,"Linked lists have a dynamic size, where as arrays have a static size.",5.0,5.0,5.0,0.9963210558131753
2294,12.5,linked lists do not have a memory constraint other than total memory,5.0,5.0,5.0,0.9944501449193713
2295,12.5,"The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.",5.0,5.0,5.0,0.9908299719358957
2296,12.5,"Array have fixed size, in Link List are flexible for adding or deleting an element. ",5.0,5.0,5.0,0.9958496272408246
2297,12.5,they are resizeable,5.0,5.0,5.0,0.9799806039292399
2298,12.5,Linked lists can be dynamically allocated and their size can change as needed.,5.0,5.0,5.0,0.9930860576130788
2299,12.5,"linked lists do not have to have a specified size, they are easier to add to and remove from",5.0,5.0,5.0,0.9962423484909855
2300,12.5,"they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.",5.0,5.0,5.0,0.9958444680329234
2301,12.5,linked list many be dynamically grown. It has not limit  ,5.0,5.0,5.0,0.9933530443817763
2302,12.6,A data structure in C++ where the the first element in the queue is the first element taken out of the queue.,5.0,5.0,5.0,0.9972560414583093
2303,12.6,A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.,5.0,5.0,5.0,0.9953935919031341
2304,12.6,First in first out.,4.0,5.0,4.5,0.9837051366470912
2305,12.6,"A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.",5.0,5.0,5.0,0.9947183108780228
2306,12.6,"A data structure that implements first in, first out. The element that has been there the longest is the first to get served.",5.0,5.0,5.0,0.9960439242027164
2307,12.6,a data structure that inserts elements at the end of it and removes elements from the front.,5.0,5.0,5.0,0.9963552728768544
2308,12.6,A queue is a collection of elements with the characteristics of first in first out (FIFO).  The first item in is the first item out.  All additional items are added to the end of the list.,5.0,5.0,5.0,0.9922983374377491
2309,12.6,"A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.",5.0,5.0,5.0,0.9916945397238875
2310,12.6,It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.,1.5,5.0,3.25,0.9939147175711907
2311,12.6,A queue is a data type that operates under a FILO (First In Last Out) method. This means that the first element inserted into the queue is the first element removed.,5.0,2.5,3.75,0.9897770940186384
2312,12.6,like a linked list except it is first in last out,0.0,5.0,2.5,0.992856312775689
2313,12.6,A queue is like a stack except it follows FIFO (First in first out) .,5.0,5.0,5.0,0.9939458646329781
2314,12.6,A queue is a data structure where the first node in is the first node out.,5.0,5.0,5.0,0.996346496096355
2315,12.6,A queue is a First in First out data structure much like a line for a movie theatre.  The first object in line is the first object to be handled or enacted upon.  ,5.0,5.0,5.0,0.9967616218222516
2316,12.6,"its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.",5.0,5.0,5.0,0.9911667815550488
2317,12.6,"a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.",5.0,5.0,5.0,0.9831911470848258
2318,12.6,"A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list",5.0,5.0,5.0,0.9892481636477963
2319,12.6,"a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.",5.0,5.0,5.0,0.9919211244848929
2320,12.6,A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.,5.0,5.0,5.0,0.9964859844602689
2321,12.6,"It is a ""first in first out"" data structure.  It can be implemented with either a linked list or an array.",5.0,5.0,5.0,0.9967647319948347
2322,12.6,an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.,5.0,5.0,5.0,0.993026223158824
2323,12.6,"A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.",5.0,5.0,5.0,0.9870058126182938
2324,12.6,"Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing .",5.0,5.0,5.0,0.9863714740770576
2325,12.6,a queue is a set of elements where the first element inserted is the first element to be removed,5.0,5.0,5.0,0.9937562723628468
2326,12.6,Is a list of items where the the user only has access to the first element and each new element is added at the end.,5.0,5.0,5.0,0.9941129431272779
2327,12.6,"a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater...the first one there gets to buy a ticket first",5.0,5.0,5.0,0.991215601250542
2328,12.6,"A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.",5.0,5.0,5.0,0.9947159157339609
2329,12.6,like a linked list expect first in last out ,0.0,2.5,1.25,0.9920783627665929
2330,12.7,push and pop,5.0,5.0,5.0,1.0
2331,12.7,"Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.",5.0,5.0,5.0,0.9629377688790594
2332,12.7,Push and pop,5.0,5.0,5.0,0.9913160079673323
2333,12.7,The Push function and the Pop function.,5.0,5.0,5.0,0.976899544427387
2334,12.7,push and pop,5.0,5.0,5.0,1.0
2335,12.7,push - puts an element on the stack pop- takes an element off the stack,5.0,5.0,5.0,0.9791794075935791
2336,12.7,Push  and pop.,5.0,5.0,5.0,0.9920781302532681
2337,12.7,Push and Pop,5.0,5.0,5.0,0.9866794546853906
2338,12.7,push and pop.,5.0,5.0,5.0,0.9978576598619543
2339,12.7,"Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.",5.0,5.0,5.0,0.9725589627719494
2340,12.7,pop and push,5.0,5.0,5.0,0.9931554119589233
2341,12.7,"push,pop,search,isEmpty",4.0,5.0,4.5,0.9849894622674037
2342,12.7,push and pop,5.0,5.0,5.0,1.0
2343,12.7,"Push, Pop, isEmpty, isFull  Maybe List to show all elements or an operation to count how many elements in the stack.",4.5,5.0,4.75,0.9638049353519162
2344,12.7,"pop, push",5.0,5.0,5.0,0.9891439450925741
2345,12.7,"isempty, push and pop, along with usually, ",5.0,5.0,5.0,0.9769653786183027
2346,12.7,push and pop,5.0,5.0,5.0,1.0
2347,12.7,push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.,5.0,5.0,5.0,0.9786313236659482
2348,12.7,"The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.",5.0,5.0,5.0,0.9745317631024394
2349,12.7,push and pop,5.0,5.0,5.0,1.0
2350,12.7,"push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack",5.0,5.0,5.0,0.9762308019735131
2351,12.7,"the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.",5.0,5.0,5.0,0.9701594421152117
2352,12.7,Push() Pop() Full() IsEmpty(),4.5,5.0,4.75,0.9572070681864763
2353,12.7,pop and push to remove an element and to insert an element,5.0,5.0,5.0,0.9889776816422675
2354,12.7,"Push, Pop",5.0,5.0,5.0,0.9758922135281025
2355,12.7,push and pop,5.0,5.0,5.0,1.0
2356,12.7,push - Add an element to the top of the stack pop - remove the top element from the stack,5.0,5.0,5.0,0.9773217775683556
2357,12.7,push and pop ,5.0,5.0,5.0,1.0
2358,12.8,When you traverse a tree of any size you will visit each node three times.  Its on the order of 3n or O(n) running time.,5.0,3.0,4.0,0.990710245000817
2359,12.8,"The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.",5.0,5.0,5.0,0.9900203149430791
2360,12.8,Where you visit the in order according to its data value.,2.5,3.0,2.75,0.9839662141932606
2361,12.8,"It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. ",0.0,3.75,1.875,0.9921790011023662
2362,12.8,"Start from the root, circle around the _whole_ ""tree"", naming each node as you see it.",5.0,4.25,4.625,0.9914598013653766
2363,12.8,it is where you visit the parent then you vistit the children,0.0,3.0,1.5,0.9793364793241552
2364,12.8,"To start from the root , traveling left and visiting ever child along the way till you return to the root from the right.",4.0,4.25,4.125,0.9914967216626114
2365,12.8,"Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.",4.0,4.25,4.125,0.9906185729067748
2366,12.8,The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.,1.5,3.75,2.625,0.9875589449955452
2367,12.8,"You travel the outside edge of the tree, clockwise, while naming each node.",4.5,3.0,3.75,0.9918889440169134
2368,12.8,children to root,0.0,3.75,1.875,0.9667847487749326
2369,12.8,go to the bottom of the left sub tree and visit the parent and then its children,2.0,3.75,2.875,0.9801763395178085
2370,12.8,The Euler tour traverses through the tree in a rubber-band style shape.,3.5,3.0,3.25,0.9854732890459728
2371,12.8,"The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes.  It allows for each node to be visited from the left, the right and the bottom.  The Euler tour first progresses to a left child if there is one, then progresses to it's parent, then it's next child, then it's parent's parent.",5.0,3.75,4.375,0.9902056389533235
2372,12.8,it runs through the parents and the children in order ,2.5,3.0,2.75,0.98512000689069
2373,12.8,"it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.",2.5,3.75,3.125,0.9919350681258379
2374,12.8,"Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.",3.5,5.0,4.25,0.9927715665693484
2375,12.8,"has preorder, in order, and postorder of a tree.  preorder = puts the parent node in front of the child node(s).  in order = puts the parent node between the left child and right child node(s).  postorder = puts the parent node after the child node(s).",2.5,3.75,3.125,0.9870915318179144
2376,12.8,"The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. ",2.5,5.0,3.75,0.9928860331258366
2377,12.8,"An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.",5.0,5.0,5.0,0.9936102640778718
2378,12.8,Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.,4.0,3.75,3.875,0.9867045507092702
2379,12.8,"The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.",4.0,4.5,4.25,0.992080196292696
2380,12.8,not answered,0.0,0.0,0.0,0.9741811535338363
2381,12.8,to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree,5.0,4.5,4.75,0.9872774549103496
2382,12.8,"You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.",5.0,5.0,5.0,0.9911661766721998
2383,12.8,"the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom",5.0,5.0,5.0,0.9934807181909653
2384,12.8,traversing a tree level by level,0.0,3.0,1.5,0.9782094219766172
2385,12.8,The Euler traversal through the tree in a rubber band style shape.,3.5,3.0,3.25,0.9865058885399006
2386,12.9,"if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.",4.5,4.0,4.25,0.9824015697447307
2387,12.9,"Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node's data equal to the data of one of its children then set the pointer for that child to NULL.",3.0,3.75,3.375,0.9937071225206596
2388,12.9,first attaching the elements from the node to be deleting to alternate nodes and then deleting that node.    delete node; ,3.0,3.75,3.375,0.9862887221634339
2389,12.9,"If you delete a node from a tree, you have to link that nodes parents to the children of that node.",2.5,3.75,3.125,0.9879632163212179
2390,12.9,"Must delete the information that the node contains (to free up memory/ ""garbage collect"") and also delete the pointer (in that node's ""parent"") that points to the node you wish to delete.",0.5,3.0,1.75,0.9944340575586175
2391,12.9,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.,5.0,5.0,5.0,0.986156745143043
2392,12.9,"You traverse the tree till you find the node you are wanting to delete.  If the node has no children you delete it.  If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.",3.5,4.25,3.875,0.9891231688765306
2393,12.9,Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.,3.5,5.0,4.25,0.9810618200472737
2394,12.9,The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.,0.0,3.75,1.875,0.983279114277938
2395,12.9,You remove the element from the tree and move the next highest element from the left into its place.,5.0,3.75,4.375,0.987330893485232
2396,12.9,delete node;,0.0,3.0,1.5,0.9819431360972262
2397,12.9,"the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub tree (or right most child of the left subtree)will replace it",5.0,5.0,5.0,0.9874585888532995
2398,12.9,"If the node is a leaf, just set it's parent's pointer to null and delete it, if it has a single child, set the parent's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leaf (rightmost child of the left subtree or leftmost child of the right subtree).",5.0,5.0,5.0,0.9878647223996265
2399,12.9,"In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node.  Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is.  After the deleted node has been usurped, you remove the deleted node from memory so it may be used again. ",4.0,3.75,3.875,0.9883376109531515
2400,12.9,It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.,3.0,3.75,3.375,0.9862899291440098
2401,12.9,"if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it's children get handled properly.",5.0,5.0,5.0,0.9937719102805131
2402,12.9,Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp ,0.0,3.75,1.875,0.9854203878264635
2403,12.9,"by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.",5.0,4.25,4.625,0.9885238197931902
2404,12.9,"Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.",0.0,3.0,1.5,0.9952315749401521
2405,12.9,"You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.",1.5,3.75,2.625,0.9836082387172557
2406,12.9,"if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.",5.0,5.0,5.0,0.9834372840714526
2407,12.9,"if the node is a leaf it can simply be deallocated/deleted from memory, and its parent's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.",4.0,4.5,4.25,0.9882175461846929
2408,12.9,not answered,0.0,0.0,0.0,0.9741811535338363
2409,12.9,you cannot delete a node because that can cause a node to have more than 2 children,0.0,2.5,1.25,0.9799933333712345
2410,12.9,"You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.",3.5,3.75,3.625,0.9907426212153247
2411,12.9,"to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller",3.0,5.0,4.0,0.9906135046037711
2412,12.9,"if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.",3.5,3.75,3.625,0.9850629725234449
2413,12.9,pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place ,2.0,3.75,2.875,0.9840996691993997
2414,12.11,Log(n) where n is the number of nodes.,4.5,5.0,4.75,0.9799232808218288
2415,12.11,log(n) steps,4.5,5.0,4.75,0.979603691881797
2416,12.11,The number of levels and the height of the tree,5.0,5.0,5.0,0.9951183767914018
2417,12.11,It is the same as the height of the tree.,5.0,5.0,5.0,0.9948786994837509
2418,12.11,"Given n elements, it would take n/2 steps to find the search criteria.",0.0,3.0,1.5,0.9859617748322684
2419,12.11,log n,4.5,5.0,4.75,0.9517133338079032
2420,12.11,Depends on the location of the node you are looking for. If it is the root it is one step.  else If it is smaller than the current you are on node you go to the left.  If it is larger than the current node you are on go to the right.,0.0,3.75,1.875,0.9835047425871762
2421,12.11,2^n where n is the # of levels the binary tree has,0.0,3.75,1.875,0.9925352079920372
2422,12.11,The number of steps to search a node is the function n-1.,2.5,4.0,3.25,0.9935113167958186
2423,12.11,"It would take n/2 elements, given n.",0.0,3.0,1.5,0.9896765079914115
2424,12.11,log(n),4.5,5.0,4.75,0.9743966247156081
2425,12.11,O(log n),4.5,5.0,4.75,0.9835749515197352
2426,12.11,O( Log (n) ),4.5,5.0,4.75,0.9839983429288736
2427,12.11,"If the binary search tree is constructed efficiently, best case scenario is O(log n) time.  Where n is the number of items in the tree.  If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list.  That worse case scenario would be a full traversal at O(n) time. Where n is the number of items in the tree.",5.0,5.0,5.0,0.9637536528143875
2428,12.11,"N, n being the number of nodes.",2.5,5.0,3.75,0.9826869867944291
2429,12.11,"depending on the way that the tree is ordered, it could be anywhere between log(n) and N steps.",5.0,5.0,5.0,0.9871195410264966
2430,12.11,log(n),4.5,5.0,4.75,0.9743966247156081
2431,12.11,"worst case scenario = the number of levels of the tree, ie: the node at the farthest position from the root node.  best case = 1 step if its the root node.",5.0,5.0,5.0,0.9827970761768532
2432,12.11,3 steps at most.  There are 3 cases.,0.0,3.0,1.5,0.9929833092916329
2433,12.11,log(n)    where n equals the total number of nodes in the tree.,4.5,5.0,4.75,0.9866575076595526
2434,12.11,the same number of steps as the number of levels or generations in the tree,5.0,5.0,5.0,0.9925286859423371
2435,12.11,to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.,5.0,5.0,5.0,0.9919995811470297
2436,12.11,"three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree",0.0,4.5,2.25,0.9855571054241077
2437,12.11,log n,4.5,5.0,4.75,0.9517133338079032
2438,12.11,( n(n-1) ) / 2  ,0.0,3.0,1.5,0.9859302630468771
2439,12.11,2n-1,0.0,4.75,2.375,0.9703976515224847
2440,12.11,"it takes at most h steps, where h is the height of the tree.",5.0,5.0,5.0,0.9871415403175253
2441,12.11,it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,0.0,3.0,1.5,0.9899325426769333
